{"ast":null,"code":"import axios from 'axios';\nimport { desencriptar } from '../componentes/general/Encriptar.js';\nimport { mensajesDeError } from '../utilitario/MensajesError.js';\nexport const REPORTES = 'REPORTES';\nexport const MENSAJE_REPORTE = 'MENSAJE_REPORTE';\nconst URL_BASE = 'http://localhost:9090';\nconst PERMISO_REALIZAR = 'SA_Realizar reportes';\nexport function actionConsultarReporte(token, reporte) {\n  const headers = {\n    'Content-Type': 'application/json',\n    'TokenAuto': desencriptar(token),\n    'Permiso': PERMISO_REALIZAR\n  }; // actividad.datosSolicitud = {\n  //     'ip': localStorage.getItem('Ip'),\n  //     'token': desencriptar(token),\n  //     'operacion': PERMISO_ASIGNACION_ACTIVIDADES\n  // }\n\n  return (dispatch, getState) => {\n    axios.post(`${URL_BASE}/proyectosESCOM-web/api/bitacora/consultar`, reporte, {\n      headers: headers\n    }).then(response => {\n      dispatch({\n        type: REPORTES,\n        reporte: response.data\n      });\n    }).catch(error => {\n      if (error.request.response === '') {\n        dispatch({\n          type: MENSAJE_REPORTE,\n          mensaje: 'Servidor fuera de servicio temporalmente'\n        });\n      } else {\n        if (error.request) {\n          debugger;\n          var o = JSON.parse(error.request.response);\n          let respuesta = mensajesDeError(o.respuesta);\n\n          if (respuesta !== '') {\n            dispatch({\n              type: MENSAJE_REPORTE,\n              mensaje: respuesta\n            });\n          } else {\n            dispatch({\n              type: MENSAJE_REPORTE,\n              mensaje: 'No se encontraron reportes'\n            });\n          }\n        }\n      }\n    });\n  };\n}\nexport function actualizarReporte() {\n  return (dispatch, getState) => {\n    dispatch({\n      type: REPORTES,\n      reporte: []\n    });\n  };\n}\nexport function actualizarMensaje(mensaje) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: MENSAJE_REPORTE,\n      mensaje: mensaje\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/jeiso/Desktop/proyectosESCOM/frontend/ESCOM-view/src/SuperAdministrador/actions/actionReporte.js"],"names":["axios","desencriptar","mensajesDeError","REPORTES","MENSAJE_REPORTE","URL_BASE","PERMISO_REALIZAR","actionConsultarReporte","token","reporte","headers","dispatch","getState","post","then","response","type","data","catch","error","request","mensaje","o","JSON","parse","respuesta","actualizarReporte","actualizarMensaje"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,YAAR,QAA4B,qCAA5B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AAGA,OAAO,MAAMC,QAAQ,GAAG,UAAjB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AAEP,MAAMC,QAAQ,GAAG,uBAAjB;AACA,MAAMC,gBAAgB,GAAG,sBAAzB;AAIA,OAAO,SAASC,sBAAT,CAAgCC,KAAhC,EAAuCC,OAAvC,EAAgD;AACnD,QAAMC,OAAO,GAAG;AACZ,oBAAgB,kBADJ;AAEZ,iBAAaT,YAAY,CAACO,KAAD,CAFb;AAGZ,eAAWF;AAHC,GAAhB,CADmD,CAMnD;AACA;AACA;AACA;AACA;;AACA,SAAO,CAACK,QAAD,EAAWC,QAAX,KAAwB;AAC3BZ,IAAAA,KAAK,CAACa,IAAN,CAAY,GAAER,QAAS,4CAAvB,EAAoEI,OAApE,EAA6E;AAAEC,MAAAA,OAAO,EAAEA;AAAX,KAA7E,EACKI,IADL,CACUC,QAAQ,IAAI;AACdJ,MAAAA,QAAQ,CAAC;AACLK,QAAAA,IAAI,EAAEb,QADD;AAELM,QAAAA,OAAO,EAACM,QAAQ,CAACE;AAFZ,OAAD,CAAR;AAIH,KANL,EAMOC,KANP,CAMcC,KAAD,IAAW;AAChB,UAAIA,KAAK,CAACC,OAAN,CAAcL,QAAd,KAA2B,EAA/B,EAAmC;AAC/BJ,QAAAA,QAAQ,CAAC;AACLK,UAAAA,IAAI,EAAEZ,eADD;AAELiB,UAAAA,OAAO,EAAE;AAFJ,SAAD,CAAR;AAIH,OALD,MAKO;AACH,YAAIF,KAAK,CAACC,OAAV,EAAmB;AACf;AACA,cAAIE,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWL,KAAK,CAACC,OAAN,CAAcL,QAAzB,CAAR;AACA,cAAIU,SAAS,GAAGvB,eAAe,CAACoB,CAAC,CAACG,SAAH,CAA/B;;AACA,cAAIA,SAAS,KAAK,EAAlB,EAAsB;AAClBd,YAAAA,QAAQ,CAAC;AACLK,cAAAA,IAAI,EAAEZ,eADD;AAELiB,cAAAA,OAAO,EAAEI;AAFJ,aAAD,CAAR;AAIH,WALD,MAKO;AACHd,YAAAA,QAAQ,CAAC;AACLK,cAAAA,IAAI,EAAEZ,eADD;AAELiB,cAAAA,OAAO,EAAE;AAFJ,aAAD,CAAR;AAIH;AACJ;AACJ;AAEJ,KA/BL;AAiCH,GAlCD;AAmCH;AAGD,OAAO,SAASK,iBAAT,GAA6B;AAChC,SAAO,CAACf,QAAD,EAAWC,QAAX,KAAwB;AAC3BD,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAEb,QADD;AAELM,MAAAA,OAAO,EAAE;AAFJ,KAAD,CAAR;AAIH,GALD;AAMH;AACD,OAAO,SAASkB,iBAAT,CAA2BN,OAA3B,EAAoC;AACvC,SAAO,CAACV,QAAD,EAAWC,QAAX,KAAwB;AAC3BD,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAEZ,eADD;AAELiB,MAAAA,OAAO,EAAEA;AAFJ,KAAD,CAAR;AAIH,GALD;AAMH","sourcesContent":["import axios from 'axios';\r\nimport {desencriptar } from '../componentes/general/Encriptar.js';\r\nimport { mensajesDeError } from '../utilitario/MensajesError.js';\r\n\r\n\r\nexport const REPORTES = 'REPORTES';\r\nexport const MENSAJE_REPORTE = 'MENSAJE_REPORTE';\r\n\r\nconst URL_BASE = 'http://localhost:9090';\r\nconst PERMISO_REALIZAR = 'SA_Realizar reportes';\r\n\r\n\r\n\r\nexport function actionConsultarReporte(token, reporte) {\r\n    const headers = {\r\n        'Content-Type': 'application/json',\r\n        'TokenAuto': desencriptar(token),\r\n        'Permiso': PERMISO_REALIZAR\r\n    }\r\n    // actividad.datosSolicitud = {\r\n    //     'ip': localStorage.getItem('Ip'),\r\n    //     'token': desencriptar(token),\r\n    //     'operacion': PERMISO_ASIGNACION_ACTIVIDADES\r\n    // }\r\n    return (dispatch, getState) => {\r\n        axios.post(`${URL_BASE}/proyectosESCOM-web/api/bitacora/consultar`, reporte, { headers: headers })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: REPORTES,\r\n                    reporte:response.data\r\n                });\r\n            }).catch((error) => {\r\n                if (error.request.response === '') {\r\n                    dispatch({\r\n                        type: MENSAJE_REPORTE,\r\n                        mensaje: 'Servidor fuera de servicio temporalmente'\r\n                    });\r\n                } else {\r\n                    if (error.request) {\r\n                        debugger;\r\n                        var o = JSON.parse(error.request.response);\r\n                        let respuesta = mensajesDeError(o.respuesta);\r\n                        if (respuesta !== '') {\r\n                            dispatch({\r\n                                type: MENSAJE_REPORTE,\r\n                                mensaje: respuesta\r\n                            });\r\n                        } else {\r\n                            dispatch({\r\n                                type: MENSAJE_REPORTE,\r\n                                mensaje: 'No se encontraron reportes'\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n\r\n            });\r\n\r\n    }\r\n}\r\n\r\n\r\nexport function actualizarReporte() {\r\n    return (dispatch, getState) => {\r\n        dispatch({\r\n            type: REPORTES,\r\n            reporte: []\r\n        });\r\n    };\r\n}\r\nexport function actualizarMensaje(mensaje) {\r\n    return (dispatch, getState) => {\r\n        dispatch({\r\n            type: MENSAJE_REPORTE,\r\n            mensaje: mensaje\r\n        });\r\n    };\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}