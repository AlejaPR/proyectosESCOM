{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jeiso\\\\Desktop\\\\proyectosESCOM\\\\frontend\\\\ESCOM-view\\\\src\\\\ModuloDocumental\\\\components\\\\prueba.js\";\nimport React, { Component } from 'react';\nimport { Editor } from '@tinymce/tinymce-react';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport moment from \"moment\";\n\nrequire('moment/locale/es.js');\n\nconst localizer = momentLocalizer(moment); //array de eventos\n\nconst myEventsList = [{\n  title: \"today\",\n  start: new Date('2020-03-05 10:22:00'),\n  end: new Date('2020-03-15 10:42:00')\n}, {\n  title: \"string\",\n  start: new Date('2020-03-05 12:22:00'),\n  end: new Date('2020-03-10 13:42:00')\n}];\n\nclass Prueba extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleEditorChange = (content, editor) => {\n      console.log('Content was updated:', content);\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container color\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      class: \"card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"card-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      class: \"card-title text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, \"Agregar informacion\"), React.createElement(Editor, {\n      apiKey: \"spssdb50vwk3go6qwrl2ktj7y3ltm94smrx3pj4pg92ypbx8\",\n      initialValue: \"<p>This is the initial content of the editor</p>\",\n      init: {\n        language: 'es',\n        language_url: '../../node_modules/@tinymce/language/es.js',\n        height: 500,\n        menubar: false,\n        plugins: ['advlist autolink lists link image charmap print preview anchor', 'searchreplace visualblocks code fullscreen', 'insertdatetime media table paste code help wordcount', 'table'],\n        fontsize_formats: '11px 12px 14px 16px 18px 24px 36px 48px',\n        font_formats: 'Andale Mono=andale mono,times; Arial=arial,helvetica,sans-serif; Arial Black=arial black,avant garde; Book Antiqua=book antiqua,palatino; Comic Sans MS=comic sans ms,sans-serif; Courier New=courier new,courier; Georgia=georgia,palatino; Helvetica=helvetica; Impact=impact,chicago; Symbol=symbol; Tahoma=tahoma,arial,helvetica,sans-serif; Terminal=terminal,monaco; Times New Roman=times new roman,times; Trebuchet MS=trebuchet ms,geneva; Verdana=verdana,geneva; Webdings=webdings; Wingdings=wingdings,zapf dingbats',\n        toolbar: 'undo redo | formatselect | bold italic backcolor | fontsizeselect  fontselect | \\\r\n                        alignleft aligncenter alignright alignjustify | table | \\\r\n                        bullist numlist outdent indent | removeformat | help '\n      },\n      onEditorChange: this.handleEditorChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }))));\n  }\n  /*\r\n    render() {\r\n      return (\r\n            <div className=\"container color\" >\r\n              <div class=\"card\">\r\n                  <div class=\"card-body\">\r\n                      <Calendar\r\n                          localizer={localizer}\r\n                          events={myEventsList}\r\n                          startAccessor=\"start\"\r\n                          endAccessor=\"end\"\r\n                          style={{ height: 700 }}\r\n                          messages={{\r\n                              next: \"sig\",\r\n                              previous: \"ant\",\r\n                              today: \"Hoy\",\r\n                              month: \"Mes\",\r\n                              week: \"Semana\",\r\n                              day: \"DÃ­a\"\r\n                          }}\r\n                      />\r\n                  </div>\r\n              </div>\r\n          </div>\r\n      );\r\n  }\r\n  */\n\n\n}\n\nexport default Prueba;","map":{"version":3,"sources":["C:/Users/jeiso/Desktop/proyectosESCOM/frontend/ESCOM-view/src/ModuloDocumental/components/prueba.js"],"names":["React","Component","Editor","Calendar","momentLocalizer","moment","require","localizer","myEventsList","title","start","Date","end","Prueba","handleEditorChange","content","editor","console","log","render","language","language_url","height","menubar","plugins","fontsize_formats","font_formats","toolbar"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,wBAAvB;AACA,SAASC,QAAT,EAAmBC,eAAnB,QAA0C,oBAA1C;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AACAC,OAAO,CAAC,qBAAD,CAAP;;AAEA,MAAMC,SAAS,GAAGH,eAAe,CAACC,MAAD,CAAjC,C,CAA0C;;AAC1C,MAAMG,YAAY,GAAG,CAAC;AAClBC,EAAAA,KAAK,EAAE,OADW;AAElBC,EAAAA,KAAK,EAAE,IAAIC,IAAJ,CAAS,qBAAT,CAFW;AAGlBC,EAAAA,GAAG,EAAE,IAAID,IAAJ,CAAS,qBAAT;AAHa,CAAD,EAKrB;AACIF,EAAAA,KAAK,EAAE,QADX;AAEIC,EAAAA,KAAK,EAAE,IAAIC,IAAJ,CAAS,qBAAT,CAFX;AAGIC,EAAAA,GAAG,EAAE,IAAID,IAAJ,CAAS,qBAAT;AAHT,CALqB,CAArB;;AAWA,MAAME,MAAN,SAAqBZ,SAArB,CAA+B;AAAA;AAAA;;AAAA,SAmJ3Ba,kBAnJ2B,GAmJN,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCH,OAApC;AACH,KArJ0B;AAAA;;AAuJ3BI,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAK,MAAA,KAAK,EAAC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,KAAK,EAAC,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAI,MAAA,KAAK,EAAC,wBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADJ,EAEI,oBAAC,MAAD;AACI,MAAA,MAAM,EAAC,kDADX;AAEI,MAAA,YAAY,EAAC,kDAFjB;AAGI,MAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAE,IADR;AAEFC,QAAAA,YAAY,EAAE,4CAFZ;AAGFC,QAAAA,MAAM,EAAE,GAHN;AAIFC,QAAAA,OAAO,EAAE,KAJP;AAKFC,QAAAA,OAAO,EAAE,CACL,gEADK,EAEL,4CAFK,EAGL,sDAHK,EAIL,OAJK,CALP;AAWFC,QAAAA,gBAAgB,EAAE,yCAXhB;AAaFC,QAAAA,YAAY,EAAE,mgBAbZ;AAcFC,QAAAA,OAAO,EACH;;;AAfF,OAHV;AAuBI,MAAA,cAAc,EAAE,KAAKb,kBAvBzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ,CAFJ,CADJ;AAmCH;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA7L2B;;AA2N/B,eAAeD,MAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Editor } from '@tinymce/tinymce-react';\r\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\r\nimport moment from \"moment\";\r\nrequire('moment/locale/es.js');\r\n\r\nconst localizer = momentLocalizer(moment);//array de eventos\r\nconst myEventsList = [{\r\n    title: \"today\",\r\n    start: new Date('2020-03-05 10:22:00'),\r\n    end: new Date('2020-03-15 10:42:00')\r\n},\r\n{\r\n    title: \"string\",\r\n    start: new Date('2020-03-05 12:22:00'),\r\n    end: new Date('2020-03-10 13:42:00')\r\n}]\r\n\r\nclass Prueba extends Component {\r\n    /*\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedFile: null,\r\n            loaded: 0\r\n        }\r\n\r\n    }\r\n    checkMimeType = (event) => {\r\n        //getting file object\r\n        let files = event.target.files\r\n        //define message container\r\n        let err = []\r\n        // list allow mime type\r\n        const types = ['image/png', 'image/jpeg', 'image/gif']\r\n        // loop access array\r\n        for (let xer = 0; xer < files.length; xer++) {\r\n            // compare file type find doesn't matach\r\n            if (types.every(type => files[xer].type !== type)) {\r\n                // create error message and assign to container   \r\n                err[xer] = files[xer].type + ' is not a supported format\\n';\r\n            }\r\n        };\r\n        for (var z = 0; z < err.length; z++) {// if message not same old that mean has error \r\n            // discard selected file\r\n            toast.error(err[z])\r\n            event.target.value = null\r\n        }\r\n        return true;\r\n    }\r\n    maxSelectFile = (event) => {\r\n        let files = event.target.files\r\n        if (files.length > 3) {\r\n            const msg = 'Only 3 images can be uploaded at a time'\r\n            event.target.value = null\r\n            toast.warn(msg)\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    checkFileSize = (event) => {\r\n        let files = event.target.files\r\n        let size = 2000000\r\n        let err = [];\r\n        for (var x = 0; x < files.length; x++) {\r\n            if (files[x].size > size) {\r\n                err[x] = files[x].type + 'is too large, please pick a smaller file\\n';\r\n            }\r\n        };\r\n        for (var z = 0; z < err.length; z++) {// if message not same old that mean has error \r\n            // discard selected file\r\n            toast.error(err[z])\r\n            event.target.value = null\r\n        }\r\n        return true;\r\n    }\r\n    onChangeHandler = event => {\r\n        var files = event.target.files\r\n        if (this.maxSelectFile(event) && this.checkMimeType(event) && this.checkFileSize(event)) {\r\n            // if return true allow to setState\r\n            this.setState({\r\n                selectedFile: files,\r\n                loaded: 0\r\n            })\r\n        }\r\n    }\r\n    onClickHandler = () => {\r\n        const data = new FormData()\r\n        for (var x = 0; x < this.state.selectedFile.length; x++) {\r\n            data.append('file', this.state.selectedFile[x])\r\n        }\r\n        axios.post(\"http://localhost:8000/upload\",data, {\r\n            onUploadProgress: ProgressEvent => {\r\n                this.setState({\r\n                    loaded: (ProgressEvent.loaded / ProgressEvent.total * 100),\r\n                })\r\n            },\r\n        })\r\n            .then(res => { // then print response status\r\n                toast.success('upload success')\r\n                console.log(res)\r\n            })\r\n            .catch(err => { // then print response status\r\n                toast.error('upload fail')\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div class=\"container\">\r\n                <div class=\"row\">\r\n                    <div class=\"offset-md-3 col-md-6\">\r\n                        <div class=\"form-group files\">\r\n                            <label>Upload Your File </label>\r\n                            <input type=\"file\" class=\"form-control\" multiple onChange={this.onChangeHandler} />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <ToastContainer />\r\n                            <Progress max=\"100\" color=\"success\" value={this.state.loaded} >{Math.round(this.state.loaded, 2)}%</Progress>\r\n\r\n                        </div>\r\n\r\n                        <button type=\"button\" class=\"btn btn-success btn-block\" onClick={this.onClickHandler}>Upload</button>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }*/\r\n\r\n    /*\r\n    convertHtmlToPdf() {\r\n        fetch('https://v2018.api2pdf.com/chrome/html', {\r\n            method: 'post',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': '65f55388-ac76-43a3-b28b-ea4720dfe2f2' //Get your API key from https://portal.api2pdf.com\r\n            },\r\n            body: JSON.stringify({ html: '<p>hello world from reactjs</p>', inlinePdf: true, fileName: 'test.pdf' })\r\n        }).then(res => res.json())\r\n            .then(res => {\r\n                var downloadLink = document.createElement(\"a\");\r\n                document.body.appendChild(downloadLink);\r\n                downloadLink.href = res.pdf;                \r\n                downloadLink.target=\"_blank\";\r\n                downloadLink.download = \"nombres\";\r\n                downloadLink.click();\r\n                document.body.removeChild(downloadLink);\r\n\r\n            }\r\n            )\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <button onClick={this.convertHtmlToPdf.bind(this)}>Generate Pdf</button>\r\n            </div>\r\n        );\r\n    }*/\r\n\r\n    \r\n    \r\n    ////////////////////////component tiny\r\n\r\n    handleEditorChange = (content, editor) => {\r\n        console.log('Content was updated:', content);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container color\">\r\n                <br/>\r\n                <div class=\"card\">\r\n                    <div class=\"card-body\">\r\n                        <h5 class=\"card-title text-center\">Agregar informacion</h5>\r\n                        <Editor\r\n                            apiKey=\"spssdb50vwk3go6qwrl2ktj7y3ltm94smrx3pj4pg92ypbx8\"\r\n                            initialValue=\"<p>This is the initial content of the editor</p>\"\r\n                            init={{\r\n                                language: 'es',\r\n                                language_url: '../../node_modules/@tinymce/language/es.js',\r\n                                height: 500,\r\n                                menubar: false,\r\n                                plugins: [\r\n                                    'advlist autolink lists link image charmap print preview anchor',\r\n                                    'searchreplace visualblocks code fullscreen',\r\n                                    'insertdatetime media table paste code help wordcount',\r\n                                    'table'\r\n                                ],\r\n                                fontsize_formats: '11px 12px 14px 16px 18px 24px 36px 48px',\r\n\r\n                                font_formats: 'Andale Mono=andale mono,times; Arial=arial,helvetica,sans-serif; Arial Black=arial black,avant garde; Book Antiqua=book antiqua,palatino; Comic Sans MS=comic sans ms,sans-serif; Courier New=courier new,courier; Georgia=georgia,palatino; Helvetica=helvetica; Impact=impact,chicago; Symbol=symbol; Tahoma=tahoma,arial,helvetica,sans-serif; Terminal=terminal,monaco; Times New Roman=times new roman,times; Trebuchet MS=trebuchet ms,geneva; Verdana=verdana,geneva; Webdings=webdings; Wingdings=wingdings,zapf dingbats',\r\n                                toolbar:\r\n                                    'undo redo | formatselect | bold italic backcolor | fontsizeselect  fontselect | \\\r\n                        alignleft aligncenter alignright alignjustify | table | \\\r\n                        bullist numlist outdent indent | removeformat | help '\r\n\r\n                            }}\r\n                            onEditorChange={this.handleEditorChange}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /*\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"container color\" >\r\n                <div class=\"card\">\r\n                    <div class=\"card-body\">\r\n                        <Calendar\r\n                            localizer={localizer}\r\n                            events={myEventsList}\r\n                            startAccessor=\"start\"\r\n                            endAccessor=\"end\"\r\n                            style={{ height: 700 }}\r\n                            messages={{\r\n                                next: \"sig\",\r\n                                previous: \"ant\",\r\n                                today: \"Hoy\",\r\n                                month: \"Mes\",\r\n                                week: \"Semana\",\r\n                                day: \"DÃ­a\"\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    */\r\n}\r\nexport default Prueba;"]},"metadata":{},"sourceType":"module"}