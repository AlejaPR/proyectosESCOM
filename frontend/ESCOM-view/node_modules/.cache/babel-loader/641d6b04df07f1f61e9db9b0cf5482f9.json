{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jeiso\\\\Desktop\\\\REACT\\\\proyectosESCOM\\\\frontend\\\\ESCOM-view\\\\src\\\\SuperAdministrador\\\\componentes\\\\popup\\\\PopUpModulo.js\";\nimport React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min'; //estilos\n\nimport '../../css/business-casual.css';\nimport '../../css/estilos.css';\nimport '../../css/bootstrap.min.css';\nimport '../../css/menu.css';\nimport 'react-notifications/lib/notifications.css';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport { NotificationContainer } from 'react-notifications';\nimport { Field, reduxForm } from \"redux-form\";\n\nclass PopUpModulo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = (event, input) => {\n      event.preventDefault();\n      let imageFile = event.target.files[0];\n\n      if (imageFile) {\n        const localImageUrl = URL.createObjectURL(imageFile);\n        const imageObject = new window.Image();\n\n        imageObject.onload = () => {\n          imageFile.width = imageObject.naturalWidth;\n          imageFile.height = imageObject.naturalHeight;\n          input.onChange(imageFile);\n          URL.revokeObjectURL(imageFile);\n        };\n\n        imageObject.src = localImageUrl;\n        this.handlePreview(localImageUrl);\n      }\n    };\n\n    this.renderFileInput = ({\n      input,\n      type,\n      meta\n    }) => {\n      const mimeType = this.props.mimeType;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        name: input.name,\n        type: type,\n        accept: mimeType,\n        onChange: event => this.handleChange(event, input),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }), meta && meta.invalid && meta.error && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, meta.error));\n    };\n\n    this.handleSubmit = values => {\n      console.log(\"Form Values: \", values);\n    };\n\n    this.onChange = evento => {\n      console.log([evento.target.name]);\n      this.setState({\n        [evento.target.name]: evento.target.value\n      });\n      console.log(this.state);\n    };\n\n    this.state = {\n      modal: false\n    };\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"danger\",\n      className: \"btn btn-dark\",\n      style: fondoBoton,\n      onClick: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Crear modulo +\"), React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      className: this.props.className,\n      size: \"col-md-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      className: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Crear modulo\"), React.createElement(ModalBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: \"sdsd\",\n      alt: \"preview\",\n      className: \"preview-image\",\n      style: {\n        height: \"300px\",\n        objectFit: \"cover\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"be JPEG or PNG\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"have Width \\u2264 100 px\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"have Height \\u2264  200 px\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"have Size \\u2264 100kb\")), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit(this.handleSubmit),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"image\",\n      type: \"file\",\n      validate: [this.validateImageWeight, this.validateImageWidth, this.validateImageHeight, this.validateImageFormat],\n      component: this.renderFileInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(ModalFooter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(Button, {\n      style: fondoBoton,\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Registrar\"), '', React.createElement(Button, {\n      color: \"secondary\",\n      onClick: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Cancelar\"))))), React.createElement(NotificationContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst fondoBoton = {\n  background: \"#ec671d\",\n  fontSize: \"13px\",\n  fontFamily: \"sans-serif\"\n};\nexport default reduxForm({\n  form: \"formularioModulo\"\n})(PopUpModulo);","map":{"version":3,"sources":["C:/Users/jeiso/Desktop/REACT/proyectosESCOM/frontend/ESCOM-view/src/SuperAdministrador/componentes/popup/PopUpModulo.js"],"names":["React","Button","Modal","ModalHeader","ModalBody","ModalFooter","NotificationContainer","Field","reduxForm","PopUpModulo","Component","constructor","props","handleChange","event","input","preventDefault","imageFile","target","files","localImageUrl","URL","createObjectURL","imageObject","window","Image","onload","width","naturalWidth","height","naturalHeight","onChange","revokeObjectURL","src","handlePreview","renderFileInput","type","meta","mimeType","name","invalid","error","handleSubmit","values","console","log","evento","setState","value","state","modal","toggle","bind","prevState","render","fondoBoton","className","objectFit","validateImageWeight","validateImageWidth","validateImageHeight","validateImageFormat","background","fontSize","fontFamily","form"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\r\n\r\n\r\n//estilos\r\nimport '../../css/business-casual.css'\r\nimport '../../css/estilos.css'\r\nimport '../../css/bootstrap.min.css'\r\nimport '../../css/menu.css'\r\nimport 'react-notifications/lib/notifications.css';\r\n\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { NotificationContainer } from 'react-notifications';\r\nimport { Field, reduxForm } from \"redux-form\";\r\n\r\nclass PopUpModulo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      modal: false\r\n    };\r\n    this.toggle = this.toggle.bind(this);\r\n  }\r\n\r\n  toggle() {\r\n    this.setState(prevState => ({\r\n      modal: !prevState.modal\r\n    }));\r\n  }\r\n\r\n  handleChange = (event, input) => {\r\n    event.preventDefault();\r\n    let imageFile = event.target.files[0];\r\n    if (imageFile) {\r\n      const localImageUrl = URL.createObjectURL(imageFile);\r\n      const imageObject = new window.Image();\r\n\r\n      imageObject.onload = () => {\r\n        imageFile.width = imageObject.naturalWidth;\r\n        imageFile.height = imageObject.naturalHeight;\r\n        input.onChange(imageFile);\r\n        URL.revokeObjectURL(imageFile);\r\n      };\r\n      imageObject.src = localImageUrl;\r\n      this.handlePreview(localImageUrl);\r\n    }\r\n  };\r\n  renderFileInput = ({ input, type, meta }) => {\r\n    const { mimeType } = this.props;\r\n    return (\r\n      <div>\r\n        <input\r\n          name={input.name}\r\n          type={type}\r\n          accept={mimeType}\r\n          onChange={event => this.handleChange(event, input)}\r\n        />\r\n        {meta && meta.invalid && meta.error && (\r\n          <div >{meta.error}</div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n\r\n  handleSubmit = values => {\r\n    console.log(\"Form Values: \", values);\r\n  };\r\n\r\n  onChange = (evento) => {\r\n    console.log([evento.target.name]);\r\n    this.setState({\r\n\r\n      [evento.target.name]: evento.target.value\r\n\r\n    });\r\n    console.log(this.state);\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Button color=\"danger\" className=\"btn btn-dark\" style={fondoBoton} onClick={this.toggle}>Crear modulo +</Button>\r\n        <Modal isOpen={this.state.modal}\r\n          toggle={this.toggle}\r\n          className={this.props.className}\r\n          size=\"col-md-6\"\r\n        >\r\n          <ModalHeader toggle={this.toggle} className=\"center\">Crear modulo</ModalHeader>\r\n          <ModalBody>\r\n            <img src=\"sdsd\" alt=\"preview\"\r\n              className=\"preview-image\"\r\n              style={{ height: \"300px\", objectFit: \"cover\" }} />\r\n            <ul>\r\n              <li>be JPEG or PNG</li>\r\n              <li>have Width ≤ 100 px</li>\r\n              <li>have Height ≤  200 px</li>\r\n              <li>have Size ≤ 100kb</li>\r\n            </ul>\r\n            <form onSubmit={this.handleSubmit(this.handleSubmit)}>\r\n              <Field\r\n                name=\"image\"\r\n                type=\"file\"\r\n                validate={[\r\n                  this.validateImageWeight,\r\n                  this.validateImageWidth,\r\n                  this.validateImageHeight,\r\n                  this.validateImageFormat\r\n                ]}\r\n                component={this.renderFileInput}\r\n              />\r\n\r\n              <ModalFooter>\r\n                <Button style={fondoBoton} type=\"submit\">Registrar</Button>{''}\r\n                <Button color=\"secondary\" onClick={this.toggle}>Cancelar</Button>\r\n              </ModalFooter>\r\n            </form>\r\n          </ModalBody>\r\n        </Modal>\r\n        <NotificationContainer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nconst fondoBoton = {\r\n  background: \"#ec671d\",\r\n  fontSize: \"13px\",\r\n  fontFamily: \"sans-serif\"\r\n\r\n}\r\n\r\n\r\nexport default reduxForm({\r\n  form: \"formularioModulo\"\r\n})(PopUpModulo);\r\n"]},"metadata":{},"sourceType":"module"}