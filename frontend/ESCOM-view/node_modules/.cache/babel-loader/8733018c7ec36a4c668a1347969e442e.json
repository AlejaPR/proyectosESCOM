{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jeiso\\\\Desktop\\\\proyectosESCOM\\\\frontend\\\\ESCOM-view\\\\src\\\\SuperAdministrador\\\\componentes\\\\administrar\\\\ContenidoConfiguracion.js\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepButton from '@material-ui/core/StepButton';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { SketchPicker } from 'react-color';\nimport { Field, reduxForm } from \"redux-form\";\nimport PropTypes from \"prop-types\";\nimport Barra from '../general/BarraDirecciones.js';\nimport { connect } from 'react-redux';\nimport { consultarConfiguracion, actionActualizarBarraLateral, actionActualizarBarraSuperior, actionActualizarBotones, actionConsultarConfiguracionCompleta } from '../../actions/actionConfiguracion.js';\nimport { campo } from '../../utilitario/GenerarInputs.js';\n\nclass Configuracion extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      activeStep: 0,\n      completed: {},\n      configuracion: null,\n      imagenLogin: null,\n      imagenLogo: null\n    };\n\n    this.completedSteps = () => {\n      return Object.keys(this.state.completed).length;\n    };\n\n    this.handleChangeComplete = color => {\n      this.props.actionActualizarBarraLateral(color.hex);\n    };\n\n    this.handleChangeCompleteSuperior = color => {\n      this.props.actionActualizarBarraSuperior(color.hex);\n    };\n\n    this.handleChangeCompleteBotones = color => {\n      this.props.actionActualizarBotones(color.hex);\n    };\n\n    this.allStepsCompleted = () => {\n      return this.completedSteps() === this.totalSteps();\n    };\n\n    this.totalSteps = () => {\n      return this.getSteps().length;\n    };\n\n    this.isLastStep = () => {\n      return this.state.activeStep === this.totalSteps() - 1;\n    };\n\n    this.useStyles = makeStyles(theme => ({\n      root: {\n        width: '100%'\n      },\n      button: {\n        marginRight: theme.spacing(1)\n      },\n      completed: {\n        display: 'inline-block'\n      },\n      instructions: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1)\n      }\n    }));\n\n    this.handleReset = () => {\n      this.setState({\n        activeStep: 0,\n        completed: {}\n      });\n    };\n\n    this.handleComplete = () => {\n      const newCompleted = this.state.completed;\n      newCompleted[this.state.activeStep] = true;\n      this.setState({\n        completed: newCompleted\n      });\n      this.handleNext();\n    };\n\n    this.handleNext = () => {\n      const newActiveStep = this.isLastStep() && !this.allStepsCompleted() ? // It's the last step, but not all steps have been completed,\n      // find the first step that has been completed\n      this.getSteps().findIndex((step, i) => !(i in this.state.completed)) : this.state.activeStep + 1;\n      this.setState({\n        activeStep: newActiveStep\n      });\n    };\n\n    this.handleStep = step => () => {\n      this.setState({\n        activeStep: step\n      });\n    };\n\n    this.handleBack = () => {\n      let cuenta = this.state.activeStep - 1;\n      this.setState({\n        activeStep: cuenta\n      });\n    };\n\n    this.validateImageWeight = imageFile => {\n      if (imageFile && imageFile.size) {\n        const imageFileKb = imageFile.size / 1024;\n        const pesoMaximo = this.props.pesoMaximo;\n\n        if (imageFileKb > pesoMaximo) {\n          return `El peso de la imagen debe ser menor o igual a ${pesoMaximo}kb`;\n        }\n      }\n    };\n\n    this.validarAnchoImagenLogin = imageFile => {\n      if (imageFile) {\n        if (imageFile.width > 750) {\n          return `El ancho de la imagen debe ser menor o igual a 750px`;\n        }\n      }\n    };\n\n    this.validarAltoImagenLogin = imageFile => {\n      if (imageFile) {\n        if (imageFile.height > 780) {\n          return `La altura de la imagen debe ser menor o igual a 780px`;\n        }\n      }\n    };\n\n    this.validarAnchoImagenLogo = imageFile => {\n      if (imageFile) {\n        if (imageFile.width > 400) {\n          return `El ancho de la imagen debe ser menor o igual a 400px`;\n        }\n      }\n    };\n\n    this.validarAltoImagenLogo = imageFile => {\n      if (imageFile) {\n        if (imageFile.height > 170) {\n          return `La altura de la imagen debe ser menor o igual a 170px`;\n        }\n      }\n    };\n\n    this.validateImageWidth = imageFile => {\n      if (imageFile) {\n        const anchuraMaxima = this.props.anchuraMaxima;\n\n        if (imageFile.width > anchuraMaxima) {\n          return `El ancho de la imagen debe ser menor o igual a ${anchuraMaxima}px`;\n        }\n      }\n    };\n\n    this.validateImageHeight = imageFile => {\n      if (imageFile) {\n        const alturaMaxima = this.props.alturaMaxima;\n\n        if (imageFile.height > alturaMaxima) {\n          return `La altura de la imagen debe ser menor o igual a ${alturaMaxima}px`;\n        }\n      }\n    };\n\n    this.validateImageFormat = imageFile => {\n      if (imageFile) {\n        const tipoDeImagen = this.props.tipoDeImagen;\n\n        if (!tipoDeImagen.includes(imageFile.type)) {\n          return `El tipo de imagen debe ser ${tipoDeImagen}`;\n        }\n      }\n    };\n\n    this.handlePreview = imageUrl => {\n      const previewImageDom = document.querySelector(\".preview-image\");\n      previewImageDom.src = imageUrl;\n    };\n\n    this.handleChange = (event, input) => {\n      event.preventDefault();\n      let imageFile = event.target.files[0];\n      const tipoDeImagen = this.props.tipoDeImagen;\n\n      if (imageFile) {\n        if (!tipoDeImagen.includes(imageFile.type)) {\n          // NotificationManager.error('Seleccione un archivo de imagen .jpg o .png');\n          event.target.value = null;\n        } else {\n          const localImageUrl = URL.createObjectURL(imageFile);\n          const imageObject = new window.Image();\n\n          imageObject.onload = () => {\n            imageFile.width = imageObject.naturalWidth;\n            imageFile.height = imageObject.naturalHeight;\n            input.onChange(imageFile);\n            URL.revokeObjectURL(imageFile);\n          };\n\n          imageObject.src = localImageUrl;\n          this.handlePreview(localImageUrl);\n        }\n      }\n    };\n\n    this.handlePreviewLogo = imageUrl => {\n      const previewImageDom = document.querySelector(\".preview-image-dos\");\n      previewImageDom.src = imageUrl;\n    };\n\n    this.handleChangeLogo = (event, input) => {\n      event.preventDefault();\n      let imageFile = event.target.files[0];\n      const tipoDeImagen = this.props.tipoDeImagen;\n\n      if (imageFile) {\n        if (!tipoDeImagen.includes(imageFile.type)) {\n          // NotificationManager.error('Seleccione un archivo de imagen .jpg o .png');\n          event.target.value = null;\n        } else {\n          const localImageUrl = URL.createObjectURL(imageFile);\n          const imageObject = new window.Image();\n\n          imageObject.onload = () => {\n            imageFile.width = imageObject.naturalWidth;\n            imageFile.height = imageObject.naturalHeight;\n            input.onChange(imageFile);\n            URL.revokeObjectURL(imageFile);\n          };\n\n          imageObject.src = localImageUrl;\n          this.handlePreviewLogo(localImageUrl);\n        }\n      }\n    };\n\n    this.renderFileInput = ({\n      input,\n      type,\n      meta\n    }) => {\n      const tipoDeImagen = this.props.tipoDeImagen;\n      const touched = meta.touched,\n            error = meta.error,\n            warning = meta.warning;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        name: input.name,\n        type: type,\n        accept: tipoDeImagen,\n        onChange: event => this.handleChange(event, input),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        },\n        __self: this\n      }), touched && (error && React.createElement(\"span\", {\n        className: \"text-danger letra form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360\n        },\n        __self: this\n      }, error) || warning && React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360\n        },\n        __self: this\n      }, warning)));\n    };\n\n    this.renderFileInputLogo = ({\n      input,\n      type,\n      meta\n    }) => {\n      const tipoDeImagen = this.props.tipoDeImagen;\n      const touched = meta.touched,\n            error = meta.error,\n            warning = meta.warning;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        name: input.name,\n        type: type,\n        accept: tipoDeImagen,\n        onChange: event => this.handleChangeLogo(event, input),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370\n        },\n        __self: this\n      }), touched && (error && React.createElement(\"span\", {\n        className: \"text-danger letra form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376\n        },\n        __self: this\n      }, error) || warning && React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376\n        },\n        __self: this\n      }, warning)));\n    };\n\n    this.handleSubmitForm = values => {\n      console.log('formvalues', this.completedSteps(), ' values ', values);\n    };\n  }\n\n  componentDidMount() {\n    this.props.actionConsultarConfiguracionCompleta(localStorage.getItem('Token'));\n  }\n\n  componentDidUpdate() {\n    if (this.state.configuracion === null & this.props.configuracionCompleta[0] == !undefined) {\n      console.log('props', this.props.configuracionCompleta[0]); // this.setState({ configuracion: this.props.configuracionCompleta[0] })\n    }\n  }\n\n  getSteps() {\n    return ['Color barra superior', 'Color barra lateral', 'Color de botones', 'Imagen del login', 'Imagen del logo'];\n  }\n\n  //\n  getStepContent(step) {\n    switch (step) {\n      case 0:\n        return React.createElement(\"div\", {\n          style: {\n            paddingTop: '3px',\n            paddingBottom: '25px',\n            paddingLeft: '349px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, React.createElement(SketchPicker, {\n          disableAlpha: true,\n          color: this.props.configuracionCompleta.barraLateral,\n          onChangeComplete: this.handleChangeComplete,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }));\n\n      case 1:\n        return React.createElement(\"div\", {\n          style: {\n            paddingTop: '3px',\n            paddingBottom: '25px',\n            paddingLeft: '349px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, React.createElement(SketchPicker, {\n          disableAlpha: true,\n          color: this.props.configuracionCompleta.barraSuperior,\n          onChangeComplete: this.handleChangeCompleteSuperior,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }));\n\n      case 2:\n        return React.createElement(\"div\", {\n          style: {\n            paddingTop: '3px',\n            paddingBottom: '25px',\n            paddingLeft: '349px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, React.createElement(SketchPicker, {\n          disableAlpha: true,\n          color: this.props.configuracionCompleta.botones,\n          onChangeComplete: this.handleChangeCompleteBotones,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }));\n\n      case 3:\n        return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n          style: {\n            paddingTop: '3px',\n            paddingBottom: '25px',\n            paddingLeft: '349px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: campo(this.props.configuracionCompleta.imagenLogin),\n          alt: \"preview\",\n          className: \"preview-image\",\n          style: {\n            height: \"780px\",\n            width: \"750px\",\n            objectFit: \"cover\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }), React.createElement(Field, {\n          name: \"image\",\n          type: \"file\",\n          validate: [this.validateImageWeight, this.validarAnchoImagenLogin, this.validarAltoImagenLogin, this.validateImageFormat],\n          component: this.renderFileInput,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        })));\n\n      case 4:\n        return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n          style: {\n            paddingTop: '3px',\n            paddingBottom: '25px',\n            paddingLeft: '349px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: campo(this.props.configuracionCompleta.logo),\n          alt: \"preview\",\n          className: \"preview-image-dos\",\n          style: {\n            height: \"200px\",\n            width: \"200px\",\n            borderRadius: \"50%\",\n            objectFit: \"cover\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }), React.createElement(Field, {\n          name: \"imagenDos\",\n          type: \"file\",\n          validate: [this.validateImageWeight, this.validarAnchoImagenLogo, this.validarAltoImagenLogo, this.validateImageFormat],\n          component: this.renderFileInputLogo,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        })));\n\n      default:\n        return 'Unknown step';\n    }\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"text-left titulo\",\n      style: estiloLetrero,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, \"Configuracion de aspecto\")), React.createElement(Barra, {\n      texto: \"Inicio > Configuracion de aspecto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"col-sm-12\",\n      style: {\n        paddingTop: \"20px\",\n        paddingRight: \"46px\",\n        paddingLeft: \"40px\",\n        paddingBottom: \"7px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container shadow\",\n      style: {\n        background: \"white\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, React.createElement(Stepper, {\n      activeStep: this.state.activeStep,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }, this.getSteps().map((label, index) => React.createElement(Step, {\n      key: label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }, React.createElement(StepButton, {\n      onClick: this.handleStep(index),\n      completed: this.state.completed[index],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }, label)))), React.createElement(\"div\", {\n      className: \"container\",\n      style: {\n        paddingTop: \"7px\",\n        paddingRight: \"12px\",\n        paddingLeft: \"40px\",\n        paddingBottom: \"20px\",\n        margin: \"0px 0px 32px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.handleSubmitForm),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    }, this.allStepsCompleted() ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      className: this.useStyles.instructions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421\n      },\n      __self: this\n    }, \"Todos los cambios han sido guardados\"), React.createElement(Button, {\n      onClick: this.handleReset,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }, \"Aceptar\")) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      className: this.useStyles.instructions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }, this.getStepContent(this.state.activeStep)), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }, React.createElement(Button, {\n      disabled: this.state.activeStep === 0,\n      onClick: this.handleBack,\n      className: this.useStyles.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }, \"Volver\"), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.handleNext,\n      className: this.useStyles.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }, \"Siguiente\"), this.state.activeStep !== this.getSteps().length && (this.state.completed[this.state.activeStep] ? React.createElement(Typography, {\n      variant: \"caption\",\n      className: this.useStyles.completed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }, \"Paso \", this.state.activeStep + 1, \" ya ha sido completado\") : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      type: \"submit\",\n      color: \"primary\",\n      onClick: this.handleComplete,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448\n      },\n      __self: this\n    }, this.completedSteps() === this.totalSteps() - 1 ? 'Confirmar cambios' : 'Guardar')))))))))));\n  }\n\n}\n\nConfiguracion.propTypes = {\n  previewLogoUrl: PropTypes.string,\n  tipoDeImagen: PropTypes.string,\n  pesoMaximo: PropTypes.number,\n  anchuraMaxima: PropTypes.number,\n  alturaMaxima: PropTypes.number,\n  handleSubmit: PropTypes.func.isRequired\n};\nConfiguracion.defaultProps = {\n  previewLogoUrl: \"https://imgplaceholder.com/400x300\",\n  tipoDeImagen: \"image/jpeg, image/png\",\n  pesoMaximo: 100,\n  anchuraMaxima: 100,\n  alturaMaxima: 100\n};\nconst estiloLetrero = {\n  paddingTop: \"20px\",\n  paddingRight: \"12px\",\n  paddingLeft: \"40px\",\n  paddingBottom: \"1px\"\n};\n\nfunction mapStateToProps(state) {\n  return {\n    configuracion: state.conf.estilos,\n    configuracionCompleta: state.conf.configuracion,\n    mensaje: state.conf.mensaje\n  };\n}\n\nlet formularioConfiguracion = reduxForm({\n  form: \"formularioConfiguracion\"\n})(Configuracion);\nexport default connect(mapStateToProps, {\n  consultarConfiguracion,\n  actionActualizarBarraLateral,\n  actionActualizarBarraSuperior,\n  actionActualizarBotones,\n  actionConsultarConfiguracionCompleta\n})(formularioConfiguracion);","map":{"version":3,"sources":["C:/Users/jeiso/Desktop/proyectosESCOM/frontend/ESCOM-view/src/SuperAdministrador/componentes/administrar/ContenidoConfiguracion.js"],"names":["React","makeStyles","Stepper","Step","StepButton","Button","Typography","SketchPicker","Field","reduxForm","PropTypes","Barra","connect","consultarConfiguracion","actionActualizarBarraLateral","actionActualizarBarraSuperior","actionActualizarBotones","actionConsultarConfiguracionCompleta","campo","Configuracion","Component","state","activeStep","completed","configuracion","imagenLogin","imagenLogo","completedSteps","Object","keys","length","handleChangeComplete","color","props","hex","handleChangeCompleteSuperior","handleChangeCompleteBotones","allStepsCompleted","totalSteps","getSteps","isLastStep","useStyles","theme","root","width","button","marginRight","spacing","display","instructions","marginTop","marginBottom","handleReset","setState","handleComplete","newCompleted","handleNext","newActiveStep","findIndex","step","i","handleStep","handleBack","cuenta","validateImageWeight","imageFile","size","imageFileKb","pesoMaximo","validarAnchoImagenLogin","validarAltoImagenLogin","height","validarAnchoImagenLogo","validarAltoImagenLogo","validateImageWidth","anchuraMaxima","validateImageHeight","alturaMaxima","validateImageFormat","tipoDeImagen","includes","type","handlePreview","imageUrl","previewImageDom","document","querySelector","src","handleChange","event","input","preventDefault","target","files","value","localImageUrl","URL","createObjectURL","imageObject","window","Image","onload","naturalWidth","naturalHeight","onChange","revokeObjectURL","handlePreviewLogo","handleChangeLogo","renderFileInput","meta","touched","error","warning","name","renderFileInputLogo","handleSubmitForm","values","console","log","componentDidMount","localStorage","getItem","componentDidUpdate","configuracionCompleta","undefined","getStepContent","paddingTop","paddingBottom","paddingLeft","barraLateral","barraSuperior","botones","objectFit","logo","borderRadius","render","estiloLetrero","paddingRight","background","map","label","index","margin","handleSubmit","propTypes","previewLogoUrl","string","number","func","isRequired","defaultProps","mapStateToProps","conf","estilos","mensaje","formularioConfiguracion","form"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepButton from '@material-ui/core/StepButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { SketchPicker } from 'react-color';\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport PropTypes from \"prop-types\";\r\nimport Barra from '../general/BarraDirecciones.js';\r\nimport { connect } from 'react-redux';\r\nimport { consultarConfiguracion, actionActualizarBarraLateral, actionActualizarBarraSuperior, actionActualizarBotones, actionConsultarConfiguracionCompleta } from '../../actions/actionConfiguracion.js'\r\nimport { campo } from '../../utilitario/GenerarInputs.js'\r\nclass Configuracion extends React.Component {\r\n\r\n    state = {\r\n        activeStep: 0,\r\n        completed: {},\r\n        configuracion: null,\r\n        imagenLogin: null,\r\n        imagenLogo: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.actionConsultarConfiguracionCompleta(localStorage.getItem('Token'));\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.configuracion === null & this.props.configuracionCompleta[0] == !undefined) {\r\n            console.log('props', this.props.configuracionCompleta[0]);\r\n\r\n            // this.setState({ configuracion: this.props.configuracionCompleta[0] })\r\n        }\r\n\r\n    }\r\n\r\n    getSteps() {\r\n        return ['Color barra superior', 'Color barra lateral', 'Color de botones', 'Imagen del login', 'Imagen del logo'];\r\n    }\r\n\r\n    completedSteps = () => {\r\n        return Object.keys(this.state.completed).length;\r\n    };\r\n\r\n    handleChangeComplete = (color) => {\r\n        this.props.actionActualizarBarraLateral(color.hex);\r\n    };\r\n\r\n    handleChangeCompleteSuperior = (color) => {\r\n        this.props.actionActualizarBarraSuperior(color.hex);\r\n    };\r\n\r\n    handleChangeCompleteBotones = (color) => {\r\n        this.props.actionActualizarBotones(color.hex);\r\n    };\r\n    //\r\n    getStepContent(step) {\r\n        switch (step) {\r\n            case 0:\r\n                return (\r\n                    <div style={{\r\n                        paddingTop: '3px',\r\n                        paddingBottom: '25px',\r\n                        paddingLeft: '349px'\r\n                    }}>\r\n                        <SketchPicker disableAlpha={true} color={this.props.configuracionCompleta.barraLateral} onChangeComplete={this.handleChangeComplete} />\r\n                    </div>\r\n                )\r\n            case 1:\r\n                return (\r\n                    <div style={{\r\n                        paddingTop: '3px',\r\n                        paddingBottom: '25px',\r\n                        paddingLeft: '349px'\r\n                    }}>\r\n                        <SketchPicker disableAlpha={true} color={this.props.configuracionCompleta.barraSuperior} onChangeComplete={this.handleChangeCompleteSuperior} />\r\n                    </div>\r\n                )\r\n            case 2:\r\n                return (\r\n                    <div style={{\r\n                        paddingTop: '3px',\r\n                        paddingBottom: '25px',\r\n                        paddingLeft: '349px'\r\n                    }}>\r\n                        <SketchPicker disableAlpha={true} color={this.props.configuracionCompleta.botones} onChangeComplete={this.handleChangeCompleteBotones} />\r\n                    </div>\r\n                );\r\n            case 3:\r\n                return (<>\r\n                    <div style={{\r\n                        paddingTop: '3px',\r\n                        paddingBottom: '25px',\r\n                        paddingLeft: '349px'\r\n                    }}>\r\n                        <img src={campo(this.props.configuracionCompleta.imagenLogin)} alt=\"preview\"\r\n                            className=\"preview-image\"\r\n                            style={{ height: \"780px\", width: \"750px\", objectFit: \"cover\" }} />\r\n                        <Field\r\n                            name=\"image\"\r\n                            type=\"file\"\r\n                            validate={[\r\n                                this.validateImageWeight,\r\n                                this.validarAnchoImagenLogin,\r\n                                this.validarAltoImagenLogin,\r\n                                this.validateImageFormat\r\n                            ]}\r\n                            component={this.renderFileInput}\r\n                        />\r\n                    </div>\r\n\r\n                </>);\r\n            case 4:\r\n                return (\r\n                    <>\r\n                        <div style={{\r\n                            paddingTop: '3px',\r\n                            paddingBottom: '25px',\r\n                            paddingLeft: '349px'\r\n                        }}>\r\n                            <img src={campo(this.props.configuracionCompleta.logo)} alt=\"preview\"\r\n                                className=\"preview-image-dos\"\r\n                                style={{ height: \"200px\", width: \"200px\", borderRadius: \"50%\", objectFit: \"cover\" }} />\r\n                            <Field\r\n                                name=\"imagenDos\"\r\n                                type=\"file\"\r\n                                validate={[\r\n                                    this.validateImageWeight,\r\n                                    this.validarAnchoImagenLogo,\r\n                                    this.validarAltoImagenLogo,\r\n                                    this.validateImageFormat\r\n                                ]}\r\n                                component={this.renderFileInputLogo}\r\n                            />\r\n                        </div>\r\n\r\n                    </>)\r\n\r\n            default:\r\n                return 'Unknown step';\r\n        }\r\n    }\r\n\r\n    allStepsCompleted = () => {\r\n        return this.completedSteps() === this.totalSteps();\r\n    };\r\n\r\n    totalSteps = () => {\r\n        return this.getSteps().length;\r\n    };\r\n\r\n    isLastStep = () => {\r\n        return this.state.activeStep === this.totalSteps() - 1;\r\n    };\r\n\r\n    useStyles = makeStyles(theme => ({\r\n        root: {\r\n            width: '100%',\r\n        },\r\n        button: {\r\n            marginRight: theme.spacing(1),\r\n        },\r\n        completed: {\r\n            display: 'inline-block',\r\n        },\r\n        instructions: {\r\n            marginTop: theme.spacing(1),\r\n            marginBottom: theme.spacing(1),\r\n        },\r\n    }));\r\n\r\n    handleReset = () => {\r\n        this.setState({ activeStep: 0, completed: {} })\r\n    };\r\n\r\n    handleComplete = () => {\r\n        const newCompleted = this.state.completed;\r\n        newCompleted[this.state.activeStep] = true;\r\n        this.setState({ completed: newCompleted })\r\n        this.handleNext();\r\n    };\r\n\r\n    handleNext = () => {\r\n        const newActiveStep =\r\n            this.isLastStep() && !this.allStepsCompleted()\r\n                ? // It's the last step, but not all steps have been completed,\r\n                // find the first step that has been completed\r\n                this.getSteps().findIndex((step, i) => !(i in this.state.completed))\r\n                : this.state.activeStep + 1;\r\n        this.setState({ activeStep: newActiveStep })\r\n    };\r\n\r\n    handleStep = step => () => {\r\n        this.setState({ activeStep: step })\r\n    };\r\n\r\n    handleBack = () => {\r\n        let cuenta = this.state.activeStep - 1;\r\n        this.setState({ activeStep: cuenta })\r\n    };\r\n\r\n    static propTypes = {\r\n        previewLogoUrl: PropTypes.string,\r\n        tipoDeImagen: PropTypes.string,\r\n        pesoMaximo: PropTypes.number,\r\n        anchuraMaxima: PropTypes.number,\r\n        alturaMaxima: PropTypes.number,\r\n        handleSubmit: PropTypes.func.isRequired\r\n    };\r\n\r\n    static defaultProps = {\r\n        previewLogoUrl: \"https://imgplaceholder.com/400x300\",\r\n        tipoDeImagen: \"image/jpeg, image/png\",\r\n        pesoMaximo: 100,\r\n        anchuraMaxima: 100,\r\n        alturaMaxima: 100\r\n    };\r\n    validateImageWeight = imageFile => {\r\n        if (imageFile && imageFile.size) {\r\n            const imageFileKb = imageFile.size / 1024;\r\n            const { pesoMaximo } = this.props;\r\n\r\n            if (imageFileKb > pesoMaximo) {\r\n                return `El peso de la imagen debe ser menor o igual a ${pesoMaximo}kb`;\r\n            }\r\n        }\r\n    };\r\n    validarAnchoImagenLogin = imageFile => {\r\n        if (imageFile) {\r\n            if (imageFile.width > 750) {\r\n                return `El ancho de la imagen debe ser menor o igual a 750px`;\r\n            }\r\n        }\r\n    };\r\n\r\n    validarAltoImagenLogin = imageFile => {\r\n        if (imageFile) {\r\n            if (imageFile.height > 780) {\r\n                return `La altura de la imagen debe ser menor o igual a 780px`;\r\n            }\r\n        }\r\n    };\r\n\r\n    validarAnchoImagenLogo = imageFile => {\r\n        if (imageFile) {\r\n            if (imageFile.width > 400) {\r\n                return `El ancho de la imagen debe ser menor o igual a 400px`;\r\n            }\r\n        }\r\n    };\r\n\r\n    validarAltoImagenLogo = imageFile => {\r\n        if (imageFile) {\r\n            if (imageFile.height > 170) {\r\n                return `La altura de la imagen debe ser menor o igual a 170px`;\r\n            }\r\n        }\r\n    };\r\n\r\n    validateImageWidth = imageFile => {\r\n        if (imageFile) {\r\n            const { anchuraMaxima } = this.props;\r\n            if (imageFile.width > anchuraMaxima) {\r\n                return `El ancho de la imagen debe ser menor o igual a ${anchuraMaxima}px`;\r\n            }\r\n        }\r\n    };\r\n    validateImageHeight = imageFile => {\r\n        if (imageFile) {\r\n            const { alturaMaxima } = this.props;\r\n\r\n            if (imageFile.height > alturaMaxima) {\r\n                return `La altura de la imagen debe ser menor o igual a ${alturaMaxima}px`;\r\n            }\r\n        }\r\n    };\r\n\r\n    validateImageFormat = imageFile => {\r\n        if (imageFile) {\r\n            const { tipoDeImagen } = this.props;\r\n            if (!tipoDeImagen.includes(imageFile.type)) {\r\n                return `El tipo de imagen debe ser ${tipoDeImagen}`;\r\n            }\r\n        }\r\n    };\r\n\r\n    handlePreview = imageUrl => {\r\n        const previewImageDom = document.querySelector(\".preview-image\");\r\n        previewImageDom.src = imageUrl;\r\n    };\r\n\r\n    handleChange = (event, input) => {\r\n        event.preventDefault();\r\n        let imageFile = event.target.files[0];\r\n        const { tipoDeImagen } = this.props;\r\n        if (imageFile) {\r\n            if (!tipoDeImagen.includes(imageFile.type)) {\r\n                // NotificationManager.error('Seleccione un archivo de imagen .jpg o .png');\r\n                event.target.value = null;\r\n            } else {\r\n\r\n                const localImageUrl = URL.createObjectURL(imageFile);\r\n                const imageObject = new window.Image();\r\n\r\n                imageObject.onload = () => {\r\n                    imageFile.width = imageObject.naturalWidth;\r\n                    imageFile.height = imageObject.naturalHeight;\r\n                    input.onChange(imageFile);\r\n                    URL.revokeObjectURL(imageFile);\r\n                };\r\n                imageObject.src = localImageUrl;\r\n                this.handlePreview(localImageUrl);\r\n            }\r\n        }\r\n    };\r\n\r\n    handlePreviewLogo = imageUrl => {\r\n        const previewImageDom = document.querySelector(\".preview-image-dos\");\r\n        previewImageDom.src = imageUrl;\r\n    };\r\n\r\n    handleChangeLogo = (event, input) => {\r\n        event.preventDefault();\r\n        let imageFile = event.target.files[0];\r\n        const { tipoDeImagen } = this.props;\r\n        if (imageFile) {\r\n            if (!tipoDeImagen.includes(imageFile.type)) {\r\n                // NotificationManager.error('Seleccione un archivo de imagen .jpg o .png');\r\n                event.target.value = null;\r\n            } else {\r\n\r\n                const localImageUrl = URL.createObjectURL(imageFile);\r\n                const imageObject = new window.Image();\r\n\r\n                imageObject.onload = () => {\r\n                    imageFile.width = imageObject.naturalWidth;\r\n                    imageFile.height = imageObject.naturalHeight;\r\n                    input.onChange(imageFile);\r\n                    URL.revokeObjectURL(imageFile);\r\n                };\r\n                imageObject.src = localImageUrl;\r\n                this.handlePreviewLogo(localImageUrl);\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    renderFileInput = ({ input, type, meta }) => {\r\n        const { tipoDeImagen } = this.props;\r\n        const { touched, error, warning } = meta;\r\n        return (\r\n            <div>\r\n                <input\r\n                    name={input.name}\r\n                    type={type}\r\n                    accept={tipoDeImagen}\r\n                    onChange={event => this.handleChange(event, input)}\r\n                />\r\n                {touched && ((error && <span className=\"text-danger letra form-group\">{error}</span>) || (warning && <span>{warning}</span>))}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    renderFileInputLogo = ({ input, type, meta }) => {\r\n        const { tipoDeImagen } = this.props;\r\n        const { touched, error, warning } = meta;\r\n        return (\r\n            <div>\r\n                <input\r\n                    name={input.name}\r\n                    type={type}\r\n                    accept={tipoDeImagen}\r\n                    onChange={event => this.handleChangeLogo(event, input)}\r\n                />\r\n                {touched && ((error && <span className=\"text-danger letra form-group\">{error}</span>) || (warning && <span>{warning}</span>))}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    handleSubmitForm = values => {\r\n        console.log('formvalues', this.completedSteps(), ' values ', values);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"text-left titulo\" style={estiloLetrero}>\r\n                    <h4>Configuracion de aspecto</h4>\r\n                </div>\r\n                <Barra texto=\"Inicio > Configuracion de aspecto\" />\r\n                <div className=\"col-sm-12\" style={{\r\n                    paddingTop: \"20px\",\r\n                    paddingRight: \"46px\",\r\n                    paddingLeft: \"40px\",\r\n                    paddingBottom: \"7px\"\r\n                }}>\r\n                    <div className=\"container shadow\" style={{ background: \"white\" }} >\r\n                        <div>\r\n                            <Stepper activeStep={this.state.activeStep}>\r\n                                {this.getSteps().map((label, index) => (\r\n                                    <Step key={label}>\r\n                                        <StepButton onClick={this.handleStep(index)} completed={this.state.completed[index]}>\r\n                                            {label}\r\n                                        </StepButton>\r\n                                    </Step>\r\n                                ))}\r\n                            </Stepper>\r\n\r\n                            <div className=\"container\" style={{\r\n                                paddingTop: \"7px\",\r\n                                paddingRight: \"12px\",\r\n                                paddingLeft: \"40px\",\r\n                                paddingBottom: \"20px\",\r\n                                margin: \"0px 0px 32px\"\r\n                            }}>\r\n                                <form onSubmit={this.props.handleSubmit(this.handleSubmitForm)}>\r\n                                    {this.allStepsCompleted() ? (\r\n                                        <div>\r\n                                            <Typography className={this.useStyles.instructions}>\r\n                                                Todos los cambios han sido guardados\r\n            </Typography>\r\n                                            <Button onClick={this.handleReset}>Aceptar</Button>\r\n                                        </div>\r\n                                    ) : (\r\n                                            <div>\r\n                                                <Typography className={this.useStyles.instructions}>{this.getStepContent(this.state.activeStep)}</Typography>\r\n                                                <div className=\"row\">\r\n                                                    <Button disabled={this.state.activeStep === 0} onClick={this.handleBack} className={this.useStyles.button}>\r\n                                                        Volver\r\n              </Button>\r\n                                                    <Button\r\n                                                        variant=\"contained\"\r\n                                                        color=\"primary\"\r\n                                                        onClick={this.handleNext}\r\n                                                        className={this.useStyles.button}\r\n                                                    >\r\n                                                        Siguiente\r\n              </Button>\r\n                                                    {this.state.activeStep !== this.getSteps().length &&\r\n                                                        (this.state.completed[this.state.activeStep] ? (\r\n                                                            <Typography variant=\"caption\" className={this.useStyles.completed}>\r\n                                                                Paso {this.state.activeStep + 1} ya ha sido completado\r\n                                                            </Typography>\r\n                                                        ) : (\r\n                                                                <div>\r\n                                                                    <Button variant=\"contained\" type=\"submit\" color=\"primary\" onClick={this.handleComplete}>\r\n                                                                        {this.completedSteps() === this.totalSteps() - 1 ? 'Confirmar cambios' : 'Guardar'}\r\n                                                                    </Button>\r\n                                                                </div>\r\n\r\n                                                            ))}\r\n                                                </div>\r\n                                            </div>\r\n                                        )}\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div >\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\nconst estiloLetrero = {\r\n    paddingTop: \"20px\",\r\n    paddingRight: \"12px\",\r\n    paddingLeft: \"40px\",\r\n    paddingBottom: \"1px\"\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        configuracion: state.conf.estilos,\r\n        configuracionCompleta: state.conf.configuracion,\r\n        mensaje: state.conf.mensaje\r\n    }\r\n}\r\n\r\nlet formularioConfiguracion = reduxForm({\r\n    form: \"formularioConfiguracion\"\r\n})(Configuracion);\r\n\r\n\r\nexport default connect(mapStateToProps, { consultarConfiguracion, actionActualizarBarraLateral, actionActualizarBarraSuperior, actionActualizarBotones, actionConsultarConfiguracionCompleta })(formularioConfiguracion);\r\n\r\n"]},"metadata":{},"sourceType":"module"}