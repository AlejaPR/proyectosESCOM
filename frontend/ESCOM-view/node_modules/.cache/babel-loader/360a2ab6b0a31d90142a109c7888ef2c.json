{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jeiso\\\\Desktop\\\\REACT\\\\proyectosESCOM\\\\frontend\\\\ESCOM-view\\\\src\\\\SuperAdministrador\\\\componentes\\\\color.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { Button } from \"reactstrap\";\n\nclass SimpleForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.validateImageWeight = imageFile => {\n      if (imageFile && imageFile.size) {\n        const imageFileKb = imageFile.size / 1024;\n        const pesoMaximo = this.props.pesoMaximo;\n\n        if (imageFileKb > pesoMaximo) {\n          return `El tamaÃ±o de la imagen debe ser menor o igual a ${pesoMaximo}kb`;\n        }\n      }\n    };\n\n    this.validateImageWidth = imageFile => {\n      if (imageFile) {\n        const anchuraMaxima = this.props.anchuraMaxima;\n\n        if (imageFile.width > anchuraMaxima) {\n          return `El ancho de la imagen debe ser menor o igual a ${anchuraMaxima}px`;\n        }\n      }\n    };\n\n    this.validateImageHeight = imageFile => {\n      if (imageFile) {\n        const alturaMaxima = this.props.alturaMaxima;\n\n        if (imageFile.height > alturaMaxima) {\n          return `La altura de la imagen debe ser menor o igual a ${alturaMaxima}px`;\n        }\n      }\n    };\n\n    this.validateImageFormat = imageFile => {\n      if (imageFile) {\n        const tipoDeImagen = this.props.tipoDeImagen;\n\n        if (!tipoDeImagen.includes(imageFile.type)) {\n          return `El tipo de imagen debe ser ${tipoDeImagen}`;\n        }\n      }\n    };\n\n    this.handlePreview = imageUrl => {\n      const previewImageDom = document.querySelector(\".preview-image\");\n      previewImageDom.src = imageUrl;\n    };\n\n    this.handleChange = (event, input) => {\n      event.preventDefault();\n      let imageFile = event.target.files[0];\n      const mimeType = this.props.mimeType;\n\n      if (!mimeType.includes(imageFile.type)) {\n        console.log('Seleccione un archivo de imagen jpg o png');\n        event.target.value = null;\n      } else {\n        if (imageFile) {\n          const localImageUrl = URL.createObjectURL(imageFile);\n          const imageObject = new window.Image();\n\n          imageObject.onload = () => {\n            imageFile.width = imageObject.naturalWidth;\n            imageFile.height = imageObject.naturalHeight;\n            input.onChange(imageFile);\n            URL.revokeObjectURL(imageFile);\n          };\n\n          imageObject.src = localImageUrl;\n        }\n      }\n    };\n\n    this.renderFileInput = ({\n      input,\n      type,\n      meta\n    }) => {\n      const mimeType = this.props.mimeType;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        name: input.name,\n        type: type,\n        accept: 'image/*',\n        onChange: event => this.handleChange(event, input),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }), meta && meta.invalid && meta.error && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, meta.error));\n    };\n\n    this.handleSubmitForm = values => {\n      console.log(\"Form Values: \", values);\n\n      if (!(values.image === undefined | values.image === null)) {\n        let idCardBase64 = '';\n        this.getBase64(values.image, result => {\n          console.log('result ', result);\n          idCardBase64 = result;\n        });\n        console.log('base64', idCardBase64);\n      } else {\n        console.log('seleccione una imagen .jpg o .png');\n      }\n    };\n  }\n\n  getBase64(file, cb) {\n    let reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = function () {\n      cb(reader.result);\n    };\n\n    reader.onerror = function (error) {\n      console.log('Error: ', error);\n    };\n  }\n\n  render() {\n    const handleSubmit = this.props.handleSubmit;\n    return React.createElement(React.Fragment, null, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"image\",\n      type: \"file\",\n      validate: [this.validateImageFormat],\n      component: this.renderFileInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(Button, {\n      primary: true,\n      type: \"submit\",\n      className: \"form-submit-button\",\n      onClick: handleSubmit(this.handleSubmitForm),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Submit\")));\n  }\n\n}\n\nSimpleForm.propTypes = {\n  previewLogoUrl: PropTypes.string,\n  tipoDeImagen: PropTypes.string,\n  pesoMaximo: PropTypes.number,\n  anchuraMaxima: PropTypes.number,\n  alturaMaxima: PropTypes.number,\n  handleSubmit: PropTypes.func.isRequired\n};\nSimpleForm.defaultProps = {\n  previewLogoUrl: \"https://imgplaceholder.com/400x300\",\n  tipoDeImagen: \"image/jpeg, image/png\",\n  pesoMaximo: 100,\n  anchuraMaxima: 100,\n  alturaMaxima: 100\n};\nexport default reduxForm({\n  form: \"simple\"\n})(SimpleForm);","map":{"version":3,"sources":["C:/Users/jeiso/Desktop/REACT/proyectosESCOM/frontend/ESCOM-view/src/SuperAdministrador/componentes/color.js"],"names":["React","PropTypes","Field","reduxForm","Button","SimpleForm","Component","validateImageWeight","imageFile","size","imageFileKb","pesoMaximo","props","validateImageWidth","anchuraMaxima","width","validateImageHeight","alturaMaxima","height","validateImageFormat","tipoDeImagen","includes","type","handlePreview","imageUrl","previewImageDom","document","querySelector","src","handleChange","event","input","preventDefault","target","files","mimeType","console","log","value","localImageUrl","URL","createObjectURL","imageObject","window","Image","onload","naturalWidth","naturalHeight","onChange","revokeObjectURL","renderFileInput","meta","name","invalid","error","handleSubmitForm","values","image","undefined","idCardBase64","getBase64","result","file","cb","reader","FileReader","readAsDataURL","onerror","render","handleSubmit","propTypes","previewLogoUrl","string","number","func","isRequired","defaultProps","form"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { Button } from \"reactstrap\";\r\n\r\nclass SimpleForm extends React.Component {\r\n\tstatic propTypes = {\r\n\t\tpreviewLogoUrl: PropTypes.string,\r\n\t\ttipoDeImagen: PropTypes.string,\r\n\t\tpesoMaximo: PropTypes.number,\r\n\t\tanchuraMaxima: PropTypes.number,\r\n\t\talturaMaxima: PropTypes.number,\r\n\t\thandleSubmit: PropTypes.func.isRequired\r\n\t};\r\n\t\r\n\tstatic defaultProps = {\r\n\t\tpreviewLogoUrl: \"https://imgplaceholder.com/400x300\",\r\n\t\ttipoDeImagen: \"image/jpeg, image/png\",\r\n\t\tpesoMaximo: 100,\r\n\t\tanchuraMaxima: 100,\r\n\t\talturaMaxima: 100\r\n\t};\r\n\r\n\tvalidateImageWeight = imageFile => {\r\n\t\tif (imageFile && imageFile.size) {\r\n\t\t\tconst imageFileKb = imageFile.size / 1024;\r\n\t\t\tconst { pesoMaximo } = this.props;\r\n\r\n\t\t\tif (imageFileKb > pesoMaximo) {\r\n\t\t\t\treturn `El tamaÃ±o de la imagen debe ser menor o igual a ${pesoMaximo}kb`;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\tvalidateImageWidth = imageFile => {\r\n\t\tif (imageFile) {\r\n\t\t\tconst { anchuraMaxima } = this.props;\r\n\t\t\tif (imageFile.width > anchuraMaxima) {\r\n\t\t\t\treturn `El ancho de la imagen debe ser menor o igual a ${anchuraMaxima}px`;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\tvalidateImageHeight = imageFile => {\r\n\t\tif (imageFile) {\r\n\t\t\tconst { alturaMaxima } = this.props;\r\n\r\n\t\t\tif (imageFile.height > alturaMaxima) {\r\n\t\t\t\treturn `La altura de la imagen debe ser menor o igual a ${alturaMaxima}px`;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\tvalidateImageFormat = imageFile => {\r\n\t\tif (imageFile) {\r\n\t\t\tconst { tipoDeImagen } = this.props;\r\n\r\n\t\t\tif (!tipoDeImagen.includes(imageFile.type)) {\r\n\t\t\t\treturn `El tipo de imagen debe ser ${tipoDeImagen}`;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\thandlePreview = imageUrl => {\r\n\t\tconst previewImageDom = document.querySelector(\".preview-image\");\r\n\t\tpreviewImageDom.src = imageUrl;\r\n\t};\r\n\thandleChange = (event, input) => {\r\n\t\tevent.preventDefault();\r\n\t\tlet imageFile = event.target.files[0];\r\n\t\tconst { mimeType } = this.props;\r\n\t\tif (!mimeType.includes(imageFile.type)) {\r\n\t\t\tconsole.log('Seleccione un archivo de imagen jpg o png');\r\n\t\t\tevent.target.value = null;\r\n\t\t} else {\r\n\t\t\tif (imageFile) {\r\n\t\t\t\tconst localImageUrl = URL.createObjectURL(imageFile);\r\n\t\t\t\tconst imageObject = new window.Image();\r\n\r\n\t\t\t\timageObject.onload = () => {\r\n\t\t\t\t\timageFile.width = imageObject.naturalWidth;\r\n\t\t\t\t\timageFile.height = imageObject.naturalHeight;\r\n\t\t\t\t\tinput.onChange(imageFile);\r\n\t\t\t\t\tURL.revokeObjectURL(imageFile);\r\n\t\t\t\t};\r\n\t\t\t\timageObject.src = localImageUrl;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t};\r\n\trenderFileInput = ({ input, type, meta }) => {\r\n\t\tconst { mimeType } = this.props;\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<input\r\n\t\t\t\t\tname={input.name}\r\n\t\t\t\t\ttype={type}\r\n\t\t\t\t\taccept={'image/*'}\r\n\t\t\t\t\tonChange={event => this.handleChange(event, input)}\r\n\t\t\t\t/>\r\n\t\t\t\t{meta && meta.invalid && meta.error && (\r\n\t\t\t\t\t<div >{meta.error}</div>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n\thandleSubmitForm = values => {\r\n\t\tconsole.log(\"Form Values: \", values);\r\n\t\tif (!(values.image === undefined | values.image === null)) {\r\n\t\t\tlet idCardBase64 = '';\r\n\t\t\tthis.getBase64(values.image, (result) => {\r\n\t\t\t\tconsole.log('result ', result);\r\n\t\t\t\tidCardBase64 = result;\r\n\t\t\t});\r\n\t\t\tconsole.log('base64', idCardBase64);\r\n\t\t} else {\r\n\t\t\tconsole.log('seleccione una imagen .jpg o .png')\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tgetBase64(file, cb) {\r\n\t\tlet reader = new FileReader();\r\n\t\treader.readAsDataURL(file);\r\n\t\treader.onload = function () {\r\n\t\t\tcb(reader.result)\r\n\t\t};\r\n\t\treader.onerror = function (error) {\r\n\t\t\tconsole.log('Error: ', error);\r\n\t\t};\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {\r\n\t\t\thandleSubmit\r\n\t\t} = this.props;\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<form>\r\n\t\t\t\t\t<Field\r\n\t\t\t\t\t\tname=\"image\"\r\n\t\t\t\t\t\ttype=\"file\"\r\n\t\t\t\t\t\tvalidate={[\r\n\t\t\t\t\t\t\tthis.validateImageFormat\r\n\t\t\t\t\t\t]}\r\n\t\t\t\t\t\tcomponent={this.renderFileInput}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tprimary\r\n\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t\tclassName=\"form-submit-button\"\r\n\t\t\t\t\t\tonClick={handleSubmit(this.handleSubmitForm)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tSubmit\r\n                </Button>\r\n\t\t\t\t</form>\r\n\t\t\t\t{/* <img style={{width:}} src={base64}/> */}\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default reduxForm({\r\n\tform: \"simple\"\r\n})(SimpleForm);"]},"metadata":{},"sourceType":"module"}