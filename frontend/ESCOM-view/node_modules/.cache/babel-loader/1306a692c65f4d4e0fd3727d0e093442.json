{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jeiso\\\\Desktop\\\\REACT\\\\proyectosESCOM\\\\frontend\\\\ESCOM-view\\\\src\\\\SuperAdministrador\\\\componentes\\\\popup\\\\PopUpModulo.js\";\nimport React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min'; //estilos\n\nimport '../../css/business-casual.css';\nimport '../../css/estilos.css';\nimport '../../css/bootstrap.min.css';\nimport '../../css/menu.css';\nimport 'react-notifications/lib/notifications.css';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\nimport Defecto from '../../imagenes/defecto.jpg';\nimport PropTypes from \"prop-types\";\nimport { Field, reduxForm } from \"redux-form\";\n\nclass PopUpModulo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.validateImageWeight = imageFile => {\n      if (imageFile && imageFile.size) {\n        // Get image size in kilobytes\n        const imageFileKb = imageFile.size / 1024;\n        const maxWeight = this.props.maxWeight;\n\n        if (imageFileKb > maxWeight) {\n          return `Image size must be less or equal to ${maxWeight}kb`;\n        }\n      }\n    };\n\n    this.validateImageWidth = imageFile => {\n      if (imageFile) {\n        const maxWidth = this.props.maxWidth;\n\n        if (imageFile.width > maxWidth) {\n          return `Image width must be less or equal to ${maxWidth}px`;\n        }\n      }\n    };\n\n    this.validateImageHeight = imageFile => {\n      if (imageFile) {\n        const maxHeight = this.props.maxHeight;\n\n        if (imageFile.height > maxHeight) {\n          return `Image height must be less or equal to ${maxHeight}px`;\n        }\n      }\n    };\n\n    this.validateImageFormat = imageFile => {\n      if (imageFile) {\n        const mimeType = this.props.mimeType;\n\n        if (!mimeType.includes(imageFile.type)) {\n          return `Image mime type must be ${mimeType}`;\n        }\n      }\n    };\n\n    this.handlePreview = imageUrl => {\n      const previewImageDom = document.querySelector(\".preview-image\");\n      previewImageDom.src = imageUrl;\n    };\n\n    this.handleChange = (event, input) => {\n      event.preventDefault();\n      let imageFile = event.target.files[0];\n\n      if (imageFile) {\n        const localImageUrl = URL.createObjectURL(imageFile);\n        const imageObject = new window.Image();\n\n        imageObject.onload = () => {\n          imageFile.width = imageObject.naturalWidth;\n          imageFile.height = imageObject.naturalHeight;\n          input.onChange(imageFile);\n          URL.revokeObjectURL(imageFile);\n        };\n\n        imageObject.src = localImageUrl;\n        this.handlePreview(localImageUrl);\n      }\n    };\n\n    this.renderFileInput = ({\n      input,\n      type,\n      meta\n    }) => {\n      const mimeType = this.props.mimeType;\n      const touched = meta.touched,\n            error = meta.error,\n            warning = meta.warning;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        name: input.name,\n        type: type,\n        accept: mimeType,\n        onChange: event => this.handleChange(event, input),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }), touched && (error && React.createElement(\"span\", {\n        className: \"text-danger letra form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, error) || warning && React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, warning)));\n    };\n\n    this.handleSubmitForm = values => {\n      console.log(\"Form Values: \", values);\n    };\n\n    this.state = {\n      modal: false\n    };\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  render() {\n    const _this$props = this.props,\n          previewLogoUrl = _this$props.previewLogoUrl,\n          maxWidth = _this$props.maxWidth,\n          maxHeight = _this$props.maxHeight,\n          maxWeight = _this$props.maxWeight,\n          handleSubmit = _this$props.handleSubmit;\n    return React.createElement(React.Fragment, null, React.createElement(Button, {\n      color: \"danger\",\n      className: \"btn btn-dark letra\",\n      style: fondoBoton,\n      onClick: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Crear modulo +\"), React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      style: {\n        width: \"400px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      style: {\n        height: \"50px\",\n        width: \"400px\"\n      },\n      className: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Crear modulo\"), React.createElement(ModalBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        padding: \"30px 30px 30px 77px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: Defecto,\n      alt: \"preview\",\n      className: \"preview-image\",\n      style: {\n        height: \"200px\",\n        width: \"200px\",\n        borderRadius: \"50%\",\n        objectFit: \"cover\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    })), React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.handleSubmitForm),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"image\",\n      type: \"file\",\n      validate: [this.validateImageWeight, this.validateImageWidth, this.validateImageHeight, this.validateImageFormat],\n      component: this.renderFileInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-sm-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"nombre\",\n      component: generarInput,\n      label: \"Nombre\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-sm-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"descripcion\",\n      component: renderTextArea,\n      label: \"descripcion\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }))), React.createElement(ModalFooter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"submit\",\n      style: fondoBoton,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"Registrar\"), React.createElement(Button, {\n      color: \"secondary\",\n      style: fondoBotonCancelar,\n      className: \"letra\",\n      onClick: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"Cancelar\"))))), React.createElement(NotificationContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }));\n  }\n\n}\n\nPopUpModulo.propTypes = {\n  previewLogoUrl: PropTypes.string,\n  mimeType: PropTypes.string,\n  maxWeight: PropTypes.number,\n  maxWidth: PropTypes.number,\n  maxHeight: PropTypes.number,\n  // redux-form porps\n  handleSubmit: PropTypes.func.isRequired\n};\nPopUpModulo.defaultProps = {\n  previewLogoUrl: \"https://imgplaceholder.com/400x300\",\n  mimeType: \"image/jpeg, image/png\",\n  maxWeight: 100,\n  maxWidth: 100,\n  maxHeight: 100\n};\n\nconst generarInput = ({\n  input,\n  label,\n  type,\n  meta: {\n    touched,\n    error,\n    warning\n  }\n}) => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 195\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 196\n  },\n  __self: this\n}, React.createElement(\"input\", Object.assign({}, input, {\n  placeholder: label,\n  type: type,\n  style: {\n    height: \"35px\",\n    fontSize: \"12px\"\n  },\n  className: \"form-control letra placeholder-no-fix\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 197\n  },\n  __self: this\n})), touched && (error && React.createElement(\"span\", {\n  className: \"text-danger letra form-group\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 198\n  },\n  __self: this\n}, error) || warning && React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 198\n  },\n  __self: this\n}, warning))));\n\nconst renderTextArea = ({\n  input,\n  label,\n  meta: {\n    touched,\n    error,\n    warning\n  }\n}) => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 204\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 205\n  },\n  __self: this\n}, React.createElement(\"textarea\", Object.assign({}, input, {\n  placeholder: label,\n  style: {\n    fontSize: \"12px\"\n  },\n  className: \"form-control letra form-control-solid placeholder-no-fix\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 206\n  },\n  __self: this\n})), touched && (error && React.createElement(\"span\", {\n  className: \"text-danger letra form-group\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 207\n  },\n  __self: this\n}, error) || warning && React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 207\n  },\n  __self: this\n}, warning))));\n\nconst fondoBotonCancelar = {\n  background: \"gray\",\n  fontSize: \"12px\",\n  fontFamily: \"Open sans, sans-serif\"\n};\nconst fondoBoton = {\n  background: \"#ec671d\",\n  fontSize: \"13px\",\n  fontFamily: \"sans-serif\"\n};\nexport default reduxForm({\n  form: \"formularioModulo\"\n})(PopUpModulo);","map":{"version":3,"sources":["C:/Users/jeiso/Desktop/REACT/proyectosESCOM/frontend/ESCOM-view/src/SuperAdministrador/componentes/popup/PopUpModulo.js"],"names":["React","Button","Modal","ModalHeader","ModalBody","ModalFooter","NotificationContainer","NotificationManager","Defecto","PropTypes","Field","reduxForm","PopUpModulo","Component","constructor","props","validateImageWeight","imageFile","size","imageFileKb","maxWeight","validateImageWidth","maxWidth","width","validateImageHeight","maxHeight","height","validateImageFormat","mimeType","includes","type","handlePreview","imageUrl","previewImageDom","document","querySelector","src","handleChange","event","input","preventDefault","target","files","localImageUrl","URL","createObjectURL","imageObject","window","Image","onload","naturalWidth","naturalHeight","onChange","revokeObjectURL","renderFileInput","meta","touched","error","warning","name","handleSubmitForm","values","console","log","state","modal","toggle","bind","setState","prevState","render","previewLogoUrl","handleSubmit","fondoBoton","padding","borderRadius","objectFit","generarInput","renderTextArea","fondoBotonCancelar","propTypes","string","number","func","isRequired","defaultProps","label","fontSize","background","fontFamily","form"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\r\n\r\n\r\n//estilos\r\nimport '../../css/business-casual.css'\r\nimport '../../css/estilos.css'\r\nimport '../../css/bootstrap.min.css'\r\nimport '../../css/menu.css'\r\nimport 'react-notifications/lib/notifications.css';\r\n\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\r\nimport Defecto from '../../imagenes/defecto.jpg';\r\nimport PropTypes from \"prop-types\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\n\r\nclass PopUpModulo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      modal: false\r\n    };\r\n    this.toggle = this.toggle.bind(this);\r\n  }\r\n\r\n  toggle() {\r\n    this.setState(prevState => ({\r\n      modal: !prevState.modal\r\n    }));\r\n  }\r\n\r\n  static propTypes = {\r\n    previewLogoUrl: PropTypes.string,\r\n    mimeType: PropTypes.string,\r\n    maxWeight: PropTypes.number,\r\n    maxWidth: PropTypes.number,\r\n    maxHeight: PropTypes.number,\r\n    // redux-form porps\r\n    handleSubmit: PropTypes.func.isRequired\r\n  };\r\n  static defaultProps = {\r\n    previewLogoUrl: \"https://imgplaceholder.com/400x300\",\r\n    mimeType: \"image/jpeg, image/png\",\r\n    maxWeight: 100,\r\n    maxWidth: 100,\r\n    maxHeight: 100\r\n  };\r\n  validateImageWeight = imageFile => {\r\n    if (imageFile && imageFile.size) {\r\n      // Get image size in kilobytes\r\n      const imageFileKb = imageFile.size / 1024;\r\n      const { maxWeight } = this.props;\r\n\r\n      if (imageFileKb > maxWeight) {\r\n        return `Image size must be less or equal to ${maxWeight}kb`;\r\n      }\r\n    }\r\n  };\r\n  validateImageWidth = imageFile => {\r\n    if (imageFile) {\r\n      const { maxWidth } = this.props;\r\n\r\n      if (imageFile.width > maxWidth) {\r\n        return `Image width must be less or equal to ${maxWidth}px`;\r\n      }\r\n    }\r\n  };\r\n  validateImageHeight = imageFile => {\r\n    if (imageFile) {\r\n      const { maxHeight } = this.props;\r\n\r\n      if (imageFile.height > maxHeight) {\r\n        return `Image height must be less or equal to ${maxHeight}px`;\r\n      }\r\n    }\r\n  };\r\n  validateImageFormat = imageFile => {\r\n    if (imageFile) {\r\n      const { mimeType } = this.props;\r\n\r\n      if (!mimeType.includes(imageFile.type)) {\r\n        return `Image mime type must be ${mimeType}`;\r\n      }\r\n    }\r\n  };\r\n  handlePreview = imageUrl => {\r\n    const previewImageDom = document.querySelector(\".preview-image\");\r\n    previewImageDom.src = imageUrl;\r\n  };\r\n  handleChange = (event, input) => {\r\n    event.preventDefault();\r\n    let imageFile = event.target.files[0];\r\n    if (imageFile) {\r\n      const localImageUrl = URL.createObjectURL(imageFile);\r\n      const imageObject = new window.Image();\r\n\r\n      imageObject.onload = () => {\r\n        imageFile.width = imageObject.naturalWidth;\r\n        imageFile.height = imageObject.naturalHeight;\r\n        input.onChange(imageFile);\r\n        URL.revokeObjectURL(imageFile);\r\n      };\r\n      imageObject.src = localImageUrl;\r\n      this.handlePreview(localImageUrl);\r\n    }\r\n  };\r\n  renderFileInput = ({ input, type, meta }) => {\r\n    const { mimeType } = this.props;\r\n    const { touched, error, warning }=meta;\r\n    return (\r\n      <div>\r\n        <input\r\n          name={input.name}\r\n          type={type}\r\n          accept={mimeType}\r\n          onChange={event => this.handleChange(event, input)}\r\n        />\r\n         {touched && ((error && <span className=\"text-danger letra form-group\">{error}</span>) || (warning && <span>{warning}</span>))}\r\n      </div>\r\n    );\r\n  };\r\n  handleSubmitForm = values => {\r\n    console.log(\"Form Values: \", values);\r\n  };\r\n  render() {\r\n    const {\r\n      previewLogoUrl,\r\n      maxWidth,\r\n      maxHeight,\r\n      maxWeight,\r\n      handleSubmit\r\n    } = this.props;\r\n    return (\r\n      <>\r\n        <Button color=\"danger\" className=\"btn btn-dark letra\" style={fondoBoton} onClick={this.toggle}>Crear modulo +</Button>\r\n        <Modal isOpen={this.state.modal}\r\n          toggle={this.toggle}\r\n          style={{ width: \"400px\" }}\r\n        >\r\n          <ModalHeader toggle={this.toggle} style={{ height: \"50px\", width: \"400px\" }} className=\"center\">Crear modulo</ModalHeader>\r\n          <ModalBody>\r\n            <div style={{padding:\"30px 30px 30px 77px\"}}>\r\n            <img src={Defecto} alt=\"preview\"\r\n              className=\"preview-image\"\r\n              style={{ height: \"200px\",width:\"200px\",borderRadius:\"50%\", objectFit: \"cover\" }} />\r\n              </div>\r\n            <form onSubmit={this.props.handleSubmit(this.handleSubmitForm)}>\r\n\r\n              <Field\r\n                name=\"image\"\r\n                type=\"file\"\r\n                validate={[\r\n                  this.validateImageWeight,\r\n                  this.validateImageWidth,\r\n                  this.validateImageHeight,\r\n                  this.validateImageFormat\r\n                ]}\r\n                component={this.renderFileInput}\r\n              />\r\n              <br/>\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-12\">\r\n                  <Field name=\"nombre\"  component={generarInput} label=\"Nombre\" />\r\n                </div>\r\n              </div>\r\n              <br/>\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-12\">\r\n                  <Field name=\"descripcion\"  component={renderTextArea} label=\"descripcion\" />\r\n                </div>\r\n              </div>\r\n              <ModalFooter>\r\n                <Button\r\n                  type=\"submit\" \r\n                  style={fondoBoton} >\r\n                  Registrar\r\n                </Button>\r\n                <Button color=\"secondary\" style={fondoBotonCancelar} className=\"letra\" onClick={this.toggle}>Cancelar</Button>\r\n              </ModalFooter>\r\n            </form>\r\n          </ModalBody>\r\n        </Modal>\r\n        <NotificationContainer />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst generarInput = ({ input, label, type, meta: { touched, error, warning } }) => (\r\n  <div>\r\n    <div>\r\n      <input {...input} placeholder={label} type={type} style={{ height: \"35px\", fontSize: \"12px\" }} className=\"form-control letra placeholder-no-fix\" />\r\n      {touched && ((error && <span className=\"text-danger letra form-group\">{error}</span>) || (warning && <span>{warning}</span>))}\r\n    </div>\r\n  </div>\r\n)\r\n\r\nconst renderTextArea = ({ input,label, meta: { touched, error, warning } }) => (\r\n  <div>\r\n    <div>\r\n      <textarea {...input} placeholder={label} style={{ fontSize: \"12px\" }} className=\"form-control letra form-control-solid placeholder-no-fix\" />\r\n      {touched && ((error && <span className=\"text-danger letra form-group\">{error}</span>) || (warning && <span>{warning}</span>))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst fondoBotonCancelar = {\r\n  background: \"gray\",\r\n  fontSize: \"12px\",\r\n  fontFamily: \"Open sans, sans-serif\"\r\n\r\n}\r\n\r\nconst fondoBoton = {\r\n  background: \"#ec671d\",\r\n  fontSize: \"13px\",\r\n  fontFamily: \"sans-serif\"\r\n\r\n}\r\n\r\n\r\nexport default reduxForm({\r\n  form: \"formularioModulo\"\r\n})(PopUpModulo);\r\n"]},"metadata":{},"sourceType":"module"}