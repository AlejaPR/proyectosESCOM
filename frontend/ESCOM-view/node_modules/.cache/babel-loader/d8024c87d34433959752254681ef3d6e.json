{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jeiso\\\\Desktop\\\\REACT\\\\proyectosESCOM\\\\frontend\\\\ESCOM-view\\\\src\\\\SuperAdministrador\\\\componentes\\\\color.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { Button } from \"reactstrap\";\n\nclass SimpleForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.validateImageWeight = imageFile => {\n      if (imageFile && imageFile.size) {\n        // Get image size in kilobytes\n        const imageFileKb = imageFile.size / 1024;\n        const maxWeight = this.props.maxWeight;\n\n        if (imageFileKb > maxWeight) {\n          return `Image size must be less or equal to ${maxWeight}kb`;\n        }\n      }\n    };\n\n    this.validateImageWidth = imageFile => {\n      if (imageFile) {\n        const maxWidth = this.props.maxWidth;\n\n        if (imageFile.width > maxWidth) {\n          return `Image width must be less or equal to ${maxWidth}px`;\n        }\n      }\n    };\n\n    this.validateImageHeight = imageFile => {\n      if (imageFile) {\n        const maxHeight = this.props.maxHeight;\n\n        if (imageFile.height > maxHeight) {\n          return `Image height must be less or equal to ${maxHeight}px`;\n        }\n      }\n    };\n\n    this.validateImageFormat = imageFile => {\n      debugger;\n\n      if (imageFile) {\n        const mimeType = this.props.mimeType;\n\n        if (!mimeType.includes(imageFile.type)) {\n          return `Image mime type must be ${mimeType}`;\n        }\n      }\n    };\n\n    this.handlePreview = imageUrl => {\n      const previewImageDom = document.querySelector(\".preview-image\");\n      previewImageDom.src = imageUrl;\n    };\n\n    this.handleChange = (event, input) => {\n      event.preventDefault();\n      let imageFile = event.target.files[0];\n      debugger;\n\n      if (imageFile) {\n        const localImageUrl = URL.createObjectURL(imageFile);\n        const imageObject = new window.Image();\n\n        imageObject.onload = () => {\n          imageFile.width = imageObject.naturalWidth;\n          imageFile.height = imageObject.naturalHeight;\n          input.onChange(imageFile);\n          URL.revokeObjectURL(imageFile);\n        };\n\n        imageObject.src = localImageUrl;\n      }\n    };\n\n    this.renderFileInput = ({\n      input,\n      type,\n      meta\n    }) => {\n      const mimeType = this.props.mimeType;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        name: input.name,\n        type: type,\n        accept: 'image/*',\n        onChange: event => this.handleChange(event, input),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }), meta && meta.invalid && meta.error && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, meta.error));\n    };\n\n    this.handleSubmitForm = values => {\n      console.log(\"Form Values: \", values);\n      debugger;\n      let idCardBase64 = '';\n      this.getBase64(values.image, result => {\n        console.log('result ', result);\n        idCardBase64 = result;\n      });\n      console.log('base64', idCardBase64);\n    };\n  }\n\n  getBase64(file, cb) {\n    let reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = function () {\n      cb(reader.result);\n    };\n\n    reader.onerror = function (error) {\n      console.log('Error: ', error);\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          previewLogoUrl = _this$props.previewLogoUrl,\n          maxWidth = _this$props.maxWidth,\n          maxHeight = _this$props.maxHeight,\n          maxWeight = _this$props.maxWeight,\n          handleSubmit = _this$props.handleSubmit;\n    return React.createElement(React.Fragment, null, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"image\",\n      type: \"file\",\n      validate: [this.validateImageFormat],\n      component: this.renderFileInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(Button, {\n      primary: true,\n      type: \"submit\",\n      className: \"form-submit-button\",\n      onClick: handleSubmit(this.handleSubmitForm),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Submit\")));\n  }\n\n}\n\nSimpleForm.propTypes = {\n  previewLogoUrl: PropTypes.string,\n  mimeType: PropTypes.string,\n  maxWeight: PropTypes.number,\n  maxWidth: PropTypes.number,\n  maxHeight: PropTypes.number,\n  // redux-form porps\n  handleSubmit: PropTypes.func.isRequired\n};\nSimpleForm.defaultProps = {\n  previewLogoUrl: \"https://imgplaceholder.com/400x300\",\n  mimeType: \"image/jpeg, image/png\",\n  maxWeight: 100,\n  maxWidth: 100,\n  maxHeight: 100\n};\nexport default reduxForm({\n  form: \"simple\"\n})(SimpleForm);","map":{"version":3,"sources":["C:/Users/jeiso/Desktop/REACT/proyectosESCOM/frontend/ESCOM-view/src/SuperAdministrador/componentes/color.js"],"names":["React","PropTypes","Field","reduxForm","Button","SimpleForm","Component","validateImageWeight","imageFile","size","imageFileKb","maxWeight","props","validateImageWidth","maxWidth","width","validateImageHeight","maxHeight","height","validateImageFormat","mimeType","includes","type","handlePreview","imageUrl","previewImageDom","document","querySelector","src","handleChange","event","input","preventDefault","target","files","localImageUrl","URL","createObjectURL","imageObject","window","Image","onload","naturalWidth","naturalHeight","onChange","revokeObjectURL","renderFileInput","meta","name","invalid","error","handleSubmitForm","values","console","log","idCardBase64","getBase64","image","result","file","cb","reader","FileReader","readAsDataURL","onerror","render","previewLogoUrl","handleSubmit","propTypes","string","number","func","isRequired","defaultProps","form"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { Button } from \"reactstrap\";\r\n\r\nclass SimpleForm extends React.Component {\r\n\tstatic propTypes = {\r\n\t\tpreviewLogoUrl: PropTypes.string,\r\n\t\tmimeType: PropTypes.string,\r\n\t\tmaxWeight: PropTypes.number,\r\n\t\tmaxWidth: PropTypes.number,\r\n\t\tmaxHeight: PropTypes.number,\r\n\t\t// redux-form porps\r\n\t\thandleSubmit: PropTypes.func.isRequired\r\n\t};\r\n\tstatic defaultProps = {\r\n\t\tpreviewLogoUrl: \"https://imgplaceholder.com/400x300\",\r\n\t\tmimeType: \"image/jpeg, image/png\",\r\n\t\tmaxWeight: 100,\r\n\t\tmaxWidth: 100,\r\n\t\tmaxHeight: 100\r\n\t};\r\n\tvalidateImageWeight = imageFile => {\r\n\t\tif (imageFile && imageFile.size) {\r\n\t\t\t// Get image size in kilobytes\r\n\t\t\tconst imageFileKb = imageFile.size / 1024;\r\n\t\t\tconst { maxWeight } = this.props;\r\n\r\n\t\t\tif (imageFileKb > maxWeight) {\r\n\t\t\t\treturn `Image size must be less or equal to ${maxWeight}kb`;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\tvalidateImageWidth = imageFile => {\r\n\t\tif (imageFile) {\r\n\t\t\tconst { maxWidth } = this.props;\r\n\r\n\t\t\tif (imageFile.width > maxWidth) {\r\n\t\t\t\treturn `Image width must be less or equal to ${maxWidth}px`;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\tvalidateImageHeight = imageFile => {\r\n\t\tif (imageFile) {\r\n\t\t\tconst { maxHeight } = this.props;\r\n\r\n\t\t\tif (imageFile.height > maxHeight) {\r\n\t\t\t\treturn `Image height must be less or equal to ${maxHeight}px`;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\tvalidateImageFormat = imageFile => {\r\n    debugger;\r\n\t\tif (imageFile) {\r\n\t\t\tconst { mimeType } = this.props;\r\n\r\n\t\t\tif (!mimeType.includes(imageFile.type)) {\r\n\t\t\t\treturn `Image mime type must be ${mimeType}`;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\thandlePreview = imageUrl => {\r\n\t\tconst previewImageDom = document.querySelector(\".preview-image\");\r\n\t\tpreviewImageDom.src = imageUrl;\r\n\t};\r\n\thandleChange = (event, input) => {\r\n\t\tevent.preventDefault();\r\n    let imageFile = event.target.files[0];\r\n    debugger;\r\n\t\tif (imageFile) {\r\n\t\t\tconst localImageUrl = URL.createObjectURL(imageFile);\r\n\t\t\tconst imageObject = new window.Image();\r\n\r\n\t\t\timageObject.onload = () => {\r\n\t\t\t\timageFile.width = imageObject.naturalWidth;\r\n\t\t\t\timageFile.height = imageObject.naturalHeight;\r\n\t\t\t\tinput.onChange(imageFile);\r\n\t\t\t\tURL.revokeObjectURL(imageFile);\r\n\t\t\t};\r\n\t\t\timageObject.src = localImageUrl;\r\n\t\t}\r\n\t};\r\n\trenderFileInput = ({ input, type, meta }) => {\r\n\t\tconst { mimeType } = this.props;\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<input\r\n\t\t\t\t\tname={input.name}\r\n\t\t\t\t\ttype={type}\r\n\t\t\t\t\taccept={ 'image/*' }\r\n\t\t\t\t\tonChange={event => this.handleChange(event, input)}\r\n\t\t\t\t/>\r\n\t\t\t\t{meta && meta.invalid && meta.error && (\r\n\t\t\t\t\t<div >{meta.error}</div>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n\thandleSubmitForm = values => {\r\n\t\tconsole.log(\"Form Values: \", values);\r\n    debugger;\r\n\t\tlet idCardBase64 = '';\r\n\t\tthis.getBase64(values.image, (result) => {\r\n\t\t\tconsole.log('result ',result);\r\n\t\t\tidCardBase64 = result;\r\n\t\t});\r\n\t\tconsole.log('base64',idCardBase64);\r\n\t};\r\n\r\n\tgetBase64(file, cb) {\r\n\t\tlet reader = new FileReader();\r\n\t\treader.readAsDataURL(file);\r\n\t\treader.onload = function () {\r\n\t\t\tcb(reader.result)\r\n\t\t};\r\n\t\treader.onerror = function (error) {\r\n\t\t\tconsole.log('Error: ', error);\r\n\t\t};\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {\r\n\t\t\tpreviewLogoUrl,\r\n\t\t\tmaxWidth,\r\n\t\t\tmaxHeight,\r\n\t\t\tmaxWeight,\r\n\t\t\thandleSubmit\r\n\t\t} = this.props;\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<form>\r\n\t\t\t\t\t<Field\r\n\t\t\t\t\t\tname=\"image\"\r\n\t\t\t\t\t\ttype=\"file\"\r\n\t\t\t\t\t\tvalidate={[\r\n\t\t\t\t\t\t\tthis.validateImageFormat\r\n\t\t\t\t\t\t]}\r\n\t\t\t\t\t\tcomponent={this.renderFileInput}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tprimary\r\n\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t\tclassName=\"form-submit-button\"\r\n\t\t\t\t\t\tonClick={handleSubmit(this.handleSubmitForm)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tSubmit\r\n                </Button>\r\n\t\t\t\t</form>\r\n\t\t\t\t{/* <img style={{width:}} src={base64}/> */}\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default reduxForm({\r\n\tform: \"simple\"\r\n})(SimpleForm);"]},"metadata":{},"sourceType":"module"}