{"ast":null,"code":"import axios from 'axios';\nimport { desencriptar } from '../../../SuperAdministrador/componentes/general/Encriptar.js';\nimport { URL_BASE } from '../../../SuperAdministrador/utilitario/Configuracion.js';\nexport const GET_CURRENT_VERSIONS = 'GET_CURRENT_VERSIONS';\nexport const GET_OLD_VERSIONS = 'GET_OLD_VERSIONS';\nconst PERMIT_CURRENT_VERSIONS = 'MD_Prueba';\nconst PERMIT_OLD_VERSIONS = 'MD_Prueba';\nconst ADD_MESSAGE = 'ADD_MESSAGE'; //MD_Lista versiones actuales\n\nexport function getCurrentVersions(token, id) {\n  const headers = {\n    'Content-Type': 'application/json',\n    'TokenAuto': desencriptar(token),\n    'Permiso': PERMIT_CURRENT_VERSIONS\n  };\n  return (dispatch, getState) => {\n    axios.get(`${URL_BASE}/proyectosESCOM-web/api/documentVersion/listCurrent/${id}`, {\n      headers: headers\n    }).then(response => {\n      dispatch({\n        type: GET_CURRENT_VERSIONS,\n        payload: response.data\n      });\n    }).catch(error => {\n      if (error.request.response === '') {\n        dispatch({\n          type: ADD_MESSAGE,\n          payload: 'error server'\n        });\n      } else {\n        if (error.request) {\n          dispatch({\n            type: ADD_MESSAGE,\n            payload: 'error server'\n          });\n        }\n      }\n    });\n  };\n} //MD_Lista versiones anteriores\n\nexport function getOldVersions(token, id) {\n  const headers = {\n    'Content-Type': 'application/json',\n    'TokenAuto': desencriptar(token),\n    'Permiso': PERMIT_OLD_VERSIONS\n  };\n  return (dispatch, getState) => {\n    axios.get(`${URL_BASE}/proyectosESCOM-web/api/documentVersion/listOld/${id}`, {\n      headers: headers\n    }).then(response => {\n      dispatch({\n        type: GET_OLD_VERSIONS,\n        payload: response.data\n      });\n    }).catch(error => {\n      if (error.request.response === '') {\n        dispatch({\n          type: ADD_MESSAGE,\n          payload: 'error server'\n        });\n      } else {\n        if (error.request) {\n          dispatch({\n            type: ADD_MESSAGE,\n            payload: 'error server'\n          });\n        }\n      }\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/hashy/Desktop/proyectosESCOM/frontend/ESCOM-view/src/ModuloDocumental/redux/actions/documentVersionA.js"],"names":["axios","desencriptar","URL_BASE","GET_CURRENT_VERSIONS","GET_OLD_VERSIONS","PERMIT_CURRENT_VERSIONS","PERMIT_OLD_VERSIONS","ADD_MESSAGE","getCurrentVersions","token","id","headers","dispatch","getState","get","then","response","type","payload","data","catch","error","request","getOldVersions"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,8DAA7B;AACA,SAASC,QAAT,QAAyB,yDAAzB;AAEA,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAGP,MAAMC,uBAAuB,GAAG,WAAhC;AACA,MAAMC,mBAAmB,GAAG,WAA5B;AAEA,MAAMC,WAAW,GAAG,aAApB,C,CAEA;;AACA,OAAO,SAASC,kBAAT,CAA4BC,KAA5B,EAAmCC,EAAnC,EAAuC;AAC1C,QAAMC,OAAO,GAAG;AACZ,oBAAgB,kBADJ;AAEZ,iBAAaV,YAAY,CAACQ,KAAD,CAFb;AAGZ,eAAWJ;AAHC,GAAhB;AAKA,SAAO,CAACO,QAAD,EAAWC,QAAX,KAAwB;AAC3Bb,IAAAA,KAAK,CAACc,GAAN,CAAW,GAAEZ,QAAS,uDAAsDQ,EAAG,EAA/E,EAAkF;AAAEC,MAAAA,OAAO,EAAEA;AAAX,KAAlF,EACKI,IADL,CACUC,QAAQ,IAAI;AACdJ,MAAAA,QAAQ,CAAC;AACLK,QAAAA,IAAI,EAAEd,oBADD;AAELe,QAAAA,OAAO,EAAEF,QAAQ,CAACG;AAFb,OAAD,CAAR;AAIH,KANL,EAMOC,KANP,CAMaC,KAAK,IAAI;AACd,UAAIA,KAAK,CAACC,OAAN,CAAcN,QAAd,KAA2B,EAA/B,EAAmC;AAC/BJ,QAAAA,QAAQ,CAAC;AACLK,UAAAA,IAAI,EAAEV,WADD;AAELW,UAAAA,OAAO,EAAE;AAFJ,SAAD,CAAR;AAIH,OALD,MAKO;AACH,YAAIG,KAAK,CAACC,OAAV,EAAmB;AACfV,UAAAA,QAAQ,CAAC;AACLK,YAAAA,IAAI,EAAEV,WADD;AAELW,YAAAA,OAAO,EAAE;AAFJ,WAAD,CAAR;AAIH;AACJ;AAEJ,KArBL;AAsBH,GAvBD;AAwBH,C,CAGD;;AACA,OAAO,SAASK,cAAT,CAAwBd,KAAxB,EAA+BC,EAA/B,EAAmC;AACtC,QAAMC,OAAO,GAAG;AACZ,oBAAgB,kBADJ;AAEZ,iBAAaV,YAAY,CAACQ,KAAD,CAFb;AAGZ,eAAWH;AAHC,GAAhB;AAKA,SAAO,CAACM,QAAD,EAAWC,QAAX,KAAwB;AAC3Bb,IAAAA,KAAK,CAACc,GAAN,CAAW,GAAEZ,QAAS,mDAAkDQ,EAAG,EAA3E,EAA8E;AAAEC,MAAAA,OAAO,EAAEA;AAAX,KAA9E,EACKI,IADL,CACUC,QAAQ,IAAI;AACdJ,MAAAA,QAAQ,CAAC;AACLK,QAAAA,IAAI,EAAEb,gBADD;AAELc,QAAAA,OAAO,EAAEF,QAAQ,CAACG;AAFb,OAAD,CAAR;AAIH,KANL,EAMOC,KANP,CAMaC,KAAK,IAAI;AACd,UAAIA,KAAK,CAACC,OAAN,CAAcN,QAAd,KAA2B,EAA/B,EAAmC;AAC/BJ,QAAAA,QAAQ,CAAC;AACLK,UAAAA,IAAI,EAAEV,WADD;AAELW,UAAAA,OAAO,EAAE;AAFJ,SAAD,CAAR;AAIH,OALD,MAKO;AACH,YAAIG,KAAK,CAACC,OAAV,EAAmB;AACfV,UAAAA,QAAQ,CAAC;AACLK,YAAAA,IAAI,EAAEV,WADD;AAELW,YAAAA,OAAO,EAAE;AAFJ,WAAD,CAAR;AAIH;AACJ;AAEJ,KArBL;AAsBH,GAvBD;AAwBH","sourcesContent":["import axios from 'axios';\r\nimport { desencriptar } from '../../../SuperAdministrador/componentes/general/Encriptar.js';\r\nimport { URL_BASE } from '../../../SuperAdministrador/utilitario/Configuracion.js';\r\n\r\nexport const GET_CURRENT_VERSIONS = 'GET_CURRENT_VERSIONS';\r\nexport const GET_OLD_VERSIONS = 'GET_OLD_VERSIONS';\r\n\r\n\r\nconst PERMIT_CURRENT_VERSIONS = 'MD_Prueba';\r\nconst PERMIT_OLD_VERSIONS = 'MD_Prueba';\r\n\r\nconst ADD_MESSAGE = 'ADD_MESSAGE';\r\n\r\n//MD_Lista versiones actuales\r\nexport function getCurrentVersions(token, id) {\r\n    const headers = {\r\n        'Content-Type': 'application/json',\r\n        'TokenAuto': desencriptar(token),\r\n        'Permiso': PERMIT_CURRENT_VERSIONS\r\n    }\r\n    return (dispatch, getState) => {\r\n        axios.get(`${URL_BASE}/proyectosESCOM-web/api/documentVersion/listCurrent/${id}`, { headers: headers })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: GET_CURRENT_VERSIONS,\r\n                    payload: response.data\r\n                });\r\n            }).catch(error => {\r\n                if (error.request.response === '') {\r\n                    dispatch({\r\n                        type: ADD_MESSAGE,\r\n                        payload: 'error server'\r\n                    });\r\n                } else {\r\n                    if (error.request) {\r\n                        dispatch({\r\n                            type: ADD_MESSAGE,\r\n                            payload: 'error server'\r\n                        });\r\n                    }\r\n                }\r\n\r\n            });\r\n    }\r\n}\r\n\r\n\r\n//MD_Lista versiones anteriores\r\nexport function getOldVersions(token, id) {\r\n    const headers = {\r\n        'Content-Type': 'application/json',\r\n        'TokenAuto': desencriptar(token),\r\n        'Permiso': PERMIT_OLD_VERSIONS\r\n    }\r\n    return (dispatch, getState) => {\r\n        axios.get(`${URL_BASE}/proyectosESCOM-web/api/documentVersion/listOld/${id}`, { headers: headers })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: GET_OLD_VERSIONS,\r\n                    payload: response.data\r\n                });\r\n            }).catch(error => {\r\n                if (error.request.response === '') {\r\n                    dispatch({\r\n                        type: ADD_MESSAGE,\r\n                        payload: 'error server'\r\n                    });\r\n                } else {\r\n                    if (error.request) {\r\n                        dispatch({\r\n                            type: ADD_MESSAGE,\r\n                            payload: 'error server'\r\n                        });\r\n                    }\r\n                }\r\n\r\n            });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}