{"ast":null,"code":"import axios from 'axios';\nimport { desencriptar } from '../../../SuperAdministrador/componentes/general/Encriptar.js';\nexport const GET_LIST_THEMATIC_CORE = 'GET_LIST_THEMATIC_CORE';\nexport const ADD_THEMATIC_CORE = 'ADD_THEMATIC_CORE';\nexport const DELETE_THEMATIC_CORE = 'DELETE_THEMATIC_CORE';\nexport const PERMIT_LIST_THEMATIC_CORE = 'MD_Prueba';\nexport const PERMIT_ADD_THEMATIC_CORE = 'MD_Prueba';\nexport const PERMIT_DELETE_THEMATIC_CORE = 'MD_Prueba';\nexport const ADD_MESSAGE_ADD = 'ADD_MESSAGE_ADD';\nexport const ADD_MESSAGE_DELETE = 'ADD_MESSAGE_DELETE';\nexport const ADD_MESSAGE = 'ADD_MESSAGE';\nconst URL_BASE = 'http://localhost:9090/proyectosESCOM-web';\nexport function addMessageAdd(mensaje) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: ADD_MESSAGE_ADD,\n      mensaje: mensaje\n    });\n  };\n}\nexport function addMessageDelete(mensaje) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: ADD_MESSAGE_DELETE,\n      mensaje: mensaje\n    });\n  };\n} //MD_Lista nucleo tematico\n\nexport function getListThematicCore(token, id) {\n  const headers = {\n    'Content-Type': 'application/json',\n    'TokenAuto': desencriptar(token),\n    'Permiso': PERMIT_LIST_THEMATIC_CORE\n  };\n  return (dispatch, getState) => {\n    axios.get(`${URL_BASE}/api/thematicCore/list/${id}`, {\n      headers: headers\n    }).then(response => {\n      dispatch({\n        type: GET_LIST_THEMATIC_CORE,\n        payload: response.data\n      });\n    }).catch(error => {\n      if (error.request.response === '') {\n        dispatch({\n          type: ADD_MESSAGE,\n          payload: 'error server'\n        });\n      } else {\n        if (error.request) {\n          dispatch({\n            type: ADD_MESSAGE,\n            payload: 'error server'\n          });\n        }\n      }\n    });\n  };\n} //MD_Agregar nucleo tematica\n\nexport function addThematicCore(token, thematicC) {\n  const headers = {\n    'Content-Type': 'application/json',\n    'TokenAuto': desencriptar(token),\n    'Permiso': PERMIT_ADD_THEMATIC_CORE\n  };\n  thematicC.requestData = {\n    'ip': localStorage.getItem('Ip'),\n    'token': desencriptar(token),\n    'operacion': PERMIT_ADD_THEMATIC_CORE\n  };\n  return (dispatch, getState) => {\n    axios.post(`${URL_BASE}/api/thematicCore/add`, thematicC, {\n      headers: headers\n    }).then(response => {\n      dispatch({\n        type: ADD_THEMATIC_CORE,\n        payload: response.data.respuesta\n      });\n    }).catch(error => {\n      if (error.request.response === '') {\n        dispatch({\n          type: ADD_THEMATIC_CORE,\n          payload: 'error server'\n        });\n      } else {\n        if (error.request) {\n          dispatch({\n            type: ADD_THEMATIC_CORE,\n            payload: 'error server'\n          });\n        }\n      }\n    });\n  };\n} //MD_Eliminar nucleo tematico\n\nexport function deleteThemacticCore(token, thematicC) {\n  const headers = {\n    'Content-Type': 'application/json',\n    'TokenAuto': desencriptar(token),\n    'Permiso': PERMIT_DELETE_THEMATIC_CORE\n  };\n  thematicC.requestData = {\n    'ip': localStorage.getItem('Ip'),\n    'token': desencriptar(token),\n    'operacion': PERMIT_DELETE_THEMATIC_CORE\n  };\n  return (dispatch, getState) => {\n    axios.put(`${URL_BASE}/api/thematicCore/delete`, thematicC, {\n      headers: headers\n    }).then(response => {\n      dispatch({\n        type: DELETE_THEMATIC_CORE,\n        payload: response.data.respuesta\n      });\n    }).catch(error => {\n      if (error.request.response === '') {\n        dispatch({\n          type: DELETE_THEMATIC_CORE,\n          payload: 'error server'\n        });\n      } else {\n        if (error.request) {\n          dispatch({\n            type: DELETE_THEMATIC_CORE,\n            payload: 'error server'\n          });\n        }\n      }\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/jeiso/Desktop/proyectosESCOM/frontend/ESCOM-view/src/ModuloDocumental/redux/actions/thematicCoreA.js"],"names":["axios","desencriptar","GET_LIST_THEMATIC_CORE","ADD_THEMATIC_CORE","DELETE_THEMATIC_CORE","PERMIT_LIST_THEMATIC_CORE","PERMIT_ADD_THEMATIC_CORE","PERMIT_DELETE_THEMATIC_CORE","ADD_MESSAGE_ADD","ADD_MESSAGE_DELETE","ADD_MESSAGE","URL_BASE","addMessageAdd","mensaje","dispatch","getState","type","addMessageDelete","getListThematicCore","token","id","headers","get","then","response","payload","data","catch","error","request","addThematicCore","thematicC","requestData","localStorage","getItem","post","respuesta","deleteThemacticCore","put"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\n\r\nimport { desencriptar } from '../../../SuperAdministrador/componentes/general/Encriptar.js';\r\n\r\nexport const GET_LIST_THEMATIC_CORE = 'GET_LIST_THEMATIC_CORE';\r\nexport const ADD_THEMATIC_CORE = 'ADD_THEMATIC_CORE';\r\nexport const DELETE_THEMATIC_CORE = 'DELETE_THEMATIC_CORE';\r\n\r\nexport const PERMIT_LIST_THEMATIC_CORE = 'MD_Prueba';\r\nexport const PERMIT_ADD_THEMATIC_CORE = 'MD_Prueba';\r\nexport const PERMIT_DELETE_THEMATIC_CORE = 'MD_Prueba';\r\n\r\nexport const ADD_MESSAGE_ADD = 'ADD_MESSAGE_ADD';\r\nexport const ADD_MESSAGE_DELETE = 'ADD_MESSAGE_DELETE';\r\nexport const ADD_MESSAGE = 'ADD_MESSAGE';\r\n\r\nconst URL_BASE = 'http://localhost:9090/proyectosESCOM-web';\r\n\r\nexport function addMessageAdd(mensaje) {\r\n    return (dispatch, getState) => {\r\n        dispatch({\r\n            type: ADD_MESSAGE_ADD,\r\n            mensaje: mensaje\r\n        });\r\n    };\r\n}\r\n\r\nexport function addMessageDelete(mensaje) {\r\n    return (dispatch, getState) => {\r\n        dispatch({\r\n            type: ADD_MESSAGE_DELETE,\r\n            mensaje: mensaje\r\n        });\r\n    };\r\n}\r\n\r\n//MD_Lista nucleo tematico\r\nexport function getListThematicCore(token, id) {\r\n    const headers = {\r\n        'Content-Type': 'application/json',\r\n        'TokenAuto': desencriptar(token),\r\n        'Permiso': PERMIT_LIST_THEMATIC_CORE\r\n    }\r\n    return (dispatch, getState) => {\r\n        axios.get(`${URL_BASE}/api/thematicCore/list/${id}`, { headers: headers })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: GET_LIST_THEMATIC_CORE,\r\n                    payload: response.data\r\n                });\r\n            }).catch(error => {\r\n                if (error.request.response === '') {\r\n                    dispatch({\r\n                        type: ADD_MESSAGE,\r\n                        payload: 'error server'\r\n                    });\r\n                } else {\r\n                    if (error.request) {\r\n                        dispatch({\r\n                            type: ADD_MESSAGE,\r\n                            payload: 'error server'\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n//MD_Agregar nucleo tematica\r\nexport function addThematicCore(token, thematicC) {\r\n    const headers = {\r\n        'Content-Type': 'application/json',\r\n        'TokenAuto': desencriptar(token),\r\n        'Permiso': PERMIT_ADD_THEMATIC_CORE\r\n    }\r\n    thematicC.requestData = {\r\n        'ip': localStorage.getItem('Ip'),\r\n        'token': desencriptar(token),\r\n        'operacion': PERMIT_ADD_THEMATIC_CORE\r\n    };\r\n    return (dispatch, getState) => {\r\n        axios.post(`${URL_BASE}/api/thematicCore/add`, thematicC, { headers: headers })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: ADD_THEMATIC_CORE,\r\n                    payload: response.data.respuesta\r\n                });\r\n            }).catch(error => {\r\n                if (error.request.response === '') {\r\n                    dispatch({\r\n                        type: ADD_THEMATIC_CORE,\r\n                        payload: 'error server'\r\n                    });\r\n                } else {\r\n                    if (error.request) {\r\n                        dispatch({\r\n                            type: ADD_THEMATIC_CORE,\r\n                            payload: 'error server'\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n//MD_Eliminar nucleo tematico\r\nexport function deleteThemacticCore(token, thematicC) {\r\n    const headers = {\r\n        'Content-Type': 'application/json',\r\n        'TokenAuto': desencriptar(token),\r\n        'Permiso': PERMIT_DELETE_THEMATIC_CORE\r\n    }\r\n    thematicC.requestData = {\r\n        'ip': localStorage.getItem('Ip'),\r\n        'token': desencriptar(token),\r\n        'operacion': PERMIT_DELETE_THEMATIC_CORE\r\n    };\r\n    return (dispatch, getState) => {\r\n        axios.put(`${URL_BASE}/api/thematicCore/delete`,thematicC, { headers: headers })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DELETE_THEMATIC_CORE,\r\n                    payload: response.data.respuesta\r\n                });\r\n            }).catch(error => {\r\n                if (error.request.response === '') {\r\n                    dispatch({\r\n                        type: DELETE_THEMATIC_CORE,\r\n                        payload: 'error server'\r\n                    });\r\n                } else {\r\n                    if (error.request) {\r\n                        dispatch({\r\n                            type: DELETE_THEMATIC_CORE,\r\n                            payload: 'error server'\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}