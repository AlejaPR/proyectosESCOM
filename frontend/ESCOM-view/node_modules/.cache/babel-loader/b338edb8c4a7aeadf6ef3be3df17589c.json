{"ast":null,"code":"import axios from 'axios';\nimport { desencriptar } from '../componentes/general/Encriptar.js';\nimport { mensajeDeConsulta } from '../mensajesDeError/MensajesDeErrorReporte.js';\nimport { URL_BASE } from '../utilitario/Configuracion.js';\nexport const REPORTES = 'REPORTES';\nexport const MENSAJE_REPORTE = 'MENSAJE_REPORTE';\nexport const CANTIDAD = 'CANTIDAD';\nexport const REPORTE_TOTAL = 'REPORTE_TOTAL';\nconst PERMISO_REALIZAR = 'SA_Realizar reportes';\nexport function actionConsultarReporte(token, reporte, cantidadDatos, paginaActual) {\n  const headers = {\n    'Content-Type': 'application/json; charset=UTF-8',\n    'TokenAuto': desencriptar(token),\n    'Permiso': PERMISO_REALIZAR\n  };\n  return (dispatch, getState) => {\n    axios.post(`${URL_BASE}/proyectosESCOM-web/api/bitacora/consultar/${cantidadDatos}/${paginaActual + 1}`, reporte, {\n      headers: headers\n    }).then(response => {\n      dispatch({\n        type: REPORTES,\n        reporte: response.data\n      });\n    }).catch(error => {\n      try {\n        if (error.request.response === '') {\n          dispatch({\n            type: MENSAJE_REPORTE,\n            mensaje: 'Servidor fuera de servicio temporalmente'\n          });\n        } else {\n          if (error.request) {\n            var o = JSON.parse(error.request.response);\n            let respuesta = mensajeDeConsulta(o.respuesta);\n            dispatch({\n              type: MENSAJE_REPORTE,\n              mensaje: respuesta\n            });\n          }\n        }\n      } catch (error) {\n        dispatch({\n          type: MENSAJE_REPORTE,\n          mensaje: 'Ocurrio un error en el servidor'\n        });\n      }\n    });\n  };\n}\nexport function actionConsultarReporteTotal(token, reporte) {\n  const headers = {\n    'Content-Type': 'application/json; charset=UTF-8',\n    'TokenAuto': desencriptar(token),\n    'Permiso': PERMISO_REALIZAR\n  };\n  return (dispatch, getState) => {\n    axios.post(`${URL_BASE}/proyectosESCOM-web/api/bitacora/consultarTotal/`, reporte, {\n      headers: headers\n    }).then(response => {\n      dispatch({\n        type: REPORTE_TOTAL,\n        reporte: response.data\n      });\n    }).catch(error => {\n      try {\n        if (error.request.response === '') {\n          dispatch({\n            type: MENSAJE_REPORTE,\n            mensaje: 'Servidor fuera de servicio temporalmente'\n          });\n        } else {\n          if (error.request) {\n            var o = JSON.parse(error.request.response);\n            let respuesta = mensajeDeConsulta(o.respuesta);\n            dispatch({\n              type: MENSAJE_REPORTE,\n              mensaje: respuesta\n            });\n          }\n        }\n      } catch (error) {\n        dispatch({\n          type: MENSAJE_REPORTE,\n          mensaje: 'Ocurrio un error en el servidor'\n        });\n      }\n    });\n  };\n}\nexport function actionConsultarReporteCantidad(token, reporte) {\n  const headers = {\n    'Content-Type': 'application/json; charset=UTF-8',\n    'TokenAuto': desencriptar(token),\n    'Permiso': PERMISO_REALIZAR\n  };\n  return (dispatch, getState) => {\n    axios.post(`${URL_BASE}/proyectosESCOM-web/api/bitacora/consultar`, reporte, {\n      headers: headers\n    }).then(response => {\n      dispatch({\n        type: CANTIDAD,\n        reporte: response.data\n      });\n    }).catch(error => {\n      try {\n        if (error.request.response === '') {\n          dispatch({\n            type: MENSAJE_REPORTE,\n            mensaje: 'Servidor fuera de servicio temporalmente'\n          });\n        } else {\n          if (error.request) {\n            var o = JSON.parse(error.request.response);\n            let respuesta = mensajeDeConsulta(o.respuesta);\n            dispatch({\n              type: MENSAJE_REPORTE,\n              mensaje: respuesta\n            });\n          }\n        }\n      } catch (error) {\n        dispatch({\n          type: MENSAJE_REPORTE,\n          mensaje: 'Ocurrio un error en el servidor'\n        });\n      }\n    });\n  };\n}\nexport function actualizarReporte() {\n  return (dispatch, getState) => {\n    dispatch({\n      type: REPORTES,\n      reporte: []\n    });\n  };\n}\nexport function actualizarMensaje(mensaje) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: MENSAJE_REPORTE,\n      mensaje: mensaje\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/jeiso/Desktop/proyectosESCOM/frontend/ESCOM-view/src/SuperAdministrador/actions/actionReporte.js"],"names":["axios","desencriptar","mensajeDeConsulta","URL_BASE","REPORTES","MENSAJE_REPORTE","CANTIDAD","REPORTE_TOTAL","PERMISO_REALIZAR","actionConsultarReporte","token","reporte","cantidadDatos","paginaActual","headers","dispatch","getState","post","then","response","type","data","catch","error","request","mensaje","o","JSON","parse","respuesta","actionConsultarReporteTotal","actionConsultarReporteCantidad","actualizarReporte","actualizarMensaje"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { desencriptar } from '../componentes/general/Encriptar.js';\r\nimport { mensajeDeConsulta } from '../mensajesDeError/MensajesDeErrorReporte.js';\r\nimport { URL_BASE } from '../utilitario/Configuracion.js';\r\n\r\nexport const REPORTES = 'REPORTES';\r\nexport const MENSAJE_REPORTE = 'MENSAJE_REPORTE';\r\nexport const CANTIDAD='CANTIDAD';\r\nexport const REPORTE_TOTAL='REPORTE_TOTAL';\r\n\r\nconst PERMISO_REALIZAR = 'SA_Realizar reportes';\r\n\r\n\r\n\r\nexport function actionConsultarReporte(token, reporte,cantidadDatos,paginaActual) {\r\n    const headers = {\r\n        'Content-Type': 'application/json; charset=UTF-8',\r\n        'TokenAuto': desencriptar(token),\r\n        'Permiso': PERMISO_REALIZAR\r\n    }\r\n    return (dispatch, getState) => {\r\n        axios.post(`${URL_BASE}/proyectosESCOM-web/api/bitacora/consultar/${cantidadDatos}/${paginaActual+1}`, reporte, { headers: headers })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: REPORTES,\r\n                    reporte: response.data\r\n                });\r\n            }).catch((error) => {\r\n                try {\r\n                    if (error.request.response === '') {\r\n                        dispatch({\r\n                            type: MENSAJE_REPORTE,\r\n                            mensaje: 'Servidor fuera de servicio temporalmente'\r\n                        });\r\n                    } else {\r\n                        if (error.request) {\r\n                            var o = JSON.parse(error.request.response);\r\n                            let respuesta = mensajeDeConsulta(o.respuesta);\r\n                            dispatch({\r\n                                type: MENSAJE_REPORTE,\r\n                                mensaje: respuesta\r\n                            });\r\n                        }\r\n                    }\r\n                } catch (error) {\r\n                    dispatch({\r\n                        type: MENSAJE_REPORTE,\r\n                        mensaje: 'Ocurrio un error en el servidor'\r\n                    });\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function actionConsultarReporteTotal(token, reporte) {\r\n    const headers = {\r\n        'Content-Type': 'application/json; charset=UTF-8',\r\n        'TokenAuto': desencriptar(token),\r\n        'Permiso': PERMISO_REALIZAR\r\n    }\r\n    return (dispatch, getState) => {\r\n        axios.post(`${URL_BASE}/proyectosESCOM-web/api/bitacora/consultarTotal/`, reporte, { headers: headers })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: REPORTE_TOTAL,\r\n                    reporte: response.data\r\n                });\r\n            }).catch((error) => {\r\n                try {\r\n                    if (error.request.response === '') {\r\n                        dispatch({\r\n                            type: MENSAJE_REPORTE,\r\n                            mensaje: 'Servidor fuera de servicio temporalmente'\r\n                        });\r\n                    } else {\r\n                        if (error.request) {\r\n                            var o = JSON.parse(error.request.response);\r\n                            let respuesta = mensajeDeConsulta(o.respuesta);\r\n                            dispatch({\r\n                                type: MENSAJE_REPORTE,\r\n                                mensaje: respuesta\r\n                            });\r\n                        }\r\n                    }\r\n                } catch (error) {\r\n                    dispatch({\r\n                        type: MENSAJE_REPORTE,\r\n                        mensaje: 'Ocurrio un error en el servidor'\r\n                    });\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function actionConsultarReporteCantidad(token, reporte) {\r\n    const headers = {\r\n        'Content-Type': 'application/json; charset=UTF-8',\r\n        'TokenAuto': desencriptar(token),\r\n        'Permiso': PERMISO_REALIZAR\r\n    }\r\n    return (dispatch, getState) => {\r\n        axios.post(`${URL_BASE}/proyectosESCOM-web/api/bitacora/consultar`, reporte, { headers: headers })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: CANTIDAD,\r\n                    reporte: response.data\r\n                });\r\n            }).catch((error) => {\r\n                try {\r\n                    if (error.request.response === '') {\r\n                        dispatch({\r\n                            type: MENSAJE_REPORTE,\r\n                            mensaje: 'Servidor fuera de servicio temporalmente'\r\n                        });\r\n                    } else {\r\n                        if (error.request) {\r\n                            var o = JSON.parse(error.request.response);\r\n                            let respuesta = mensajeDeConsulta(o.respuesta);\r\n                            dispatch({\r\n                                type: MENSAJE_REPORTE,\r\n                                mensaje: respuesta\r\n                            });\r\n                        }\r\n                    }\r\n                } catch (error) {\r\n                    dispatch({\r\n                        type: MENSAJE_REPORTE,\r\n                        mensaje: 'Ocurrio un error en el servidor'\r\n                    });\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport function actualizarReporte() {\r\n    return (dispatch, getState) => {\r\n        dispatch({\r\n            type: REPORTES,\r\n            reporte: []\r\n        });\r\n    };\r\n}\r\nexport function actualizarMensaje(mensaje) {\r\n    return (dispatch, getState) => {\r\n        dispatch({\r\n            type: MENSAJE_REPORTE,\r\n            mensaje: mensaje\r\n        });\r\n    };\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}