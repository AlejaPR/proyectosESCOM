{"ast":null,"code":"import { NotificationManager } from 'react-notifications';\nexport const mensajesDeError = respuesta => {\n  let filtro = mensajesFiltro(respuesta);\n\n  if (filtro === '') {} else {\n    return filtro;\n  }\n\n  switch (respuesta) {\n    case 'Token requerido':\n      return 'Token requerido';\n\n    case 'Sin permiso':\n      return 'Sin permiso';\n\n    case 'token vencido':\n      return 'Token requerido';\n\n    case 'token no registrado':\n      return 'Token requerido';\n\n    case 'token incorrecto':\n      return 'Token requerido';\n\n    case 'Ocurrio un error interno del servidor':\n      return 'Token requerido';\n\n    default:\n      return '';\n  }\n};\nexport const mensajesDeErrorModulosAcceso = respuesta => {\n  let filtro = mensajesFiltro(respuesta);\n\n  if (filtro === '') {\n    switch (respuesta) {\n      case 'Ocurrio un error en el servidor':\n        return 'Ocurrio un error en el servidor';\n\n      case 'Ocurrio un error al momento de hacer la consulta':\n        return 'Ocurrio un error en el servidor';\n\n      case 'No hay permisos asociados':\n        return 'No hay permisos asociados';\n\n      case 'sesion cerrada':\n        return respuesta;\n    }\n  } else {\n    return filtro;\n  }\n};\nexport const mensajesDeErrorRegistroUsuarios = respuesta => {\n  let filtro = mensajesFiltro(respuesta);\n\n  if (filtro === '') {\n    switch (respuesta) {\n      case 'Ocurrio un error en el servidor':\n        return 'Ocurrio un error en el servidor';\n\n      case 'El correo o numero de documento ya esta registrado':\n        return respuesta;\n\n      case 'Ocurrio un error al momento de hacer el registro del usuario':\n        return respuesta;\n\n      case 'No se encontro ningun dato coincidente':\n        return 'Ocurrio un error en el servidor';\n    }\n  } else {\n    return filtro;\n  }\n};\nexport const mensajesDeErrorListarUsuarios = respuesta => {\n  let filtro = mensajesFiltro(respuesta);\n\n  if (filtro === '') {\n    switch (respuesta) {\n      case 'Ocurrio un error en el servidor':\n        return 'Ocurrio un error en el servidor';\n\n      case 'No se encontraron datos':\n        return respuesta;\n\n      case 'Ocurrio un error al momento de hacer la consulta':\n        return 'Ocurrio un error en el servidor';\n    }\n  } else {\n    return filtro;\n  }\n};\n\nconst mensajesFiltro = respuesta => {\n  switch (respuesta) {\n    case 'Token requerido':\n      return 'Token requerido';\n\n    case 'Sin permiso':\n      return 'Sin permiso';\n\n    case 'token vencido':\n      return 'Token requerido';\n\n    case 'token no registrado':\n      return 'Token requerido';\n\n    case 'token incorrecto':\n      return 'Token requerido';\n\n    default:\n      return '';\n  }\n};\n\nexport const formatoFecha = fecha => {\n  let fechaRecibida = new Date(fecha);\n  let dia = fechaRecibida.getUTCDate();\n  let mes = fechaRecibida.getUTCMonth();\n  let ano = fechaRecibida.getFullYear();\n  return new Date(ano, mes, dia);\n};","map":{"version":3,"sources":["C:/Users/jeiso/Desktop/proyectosESCOM/frontend/ESCOM-view/src/SuperAdministrador/utilitario/MensajesError.js"],"names":["NotificationManager","mensajesDeError","respuesta","filtro","mensajesFiltro","mensajesDeErrorModulosAcceso","mensajesDeErrorRegistroUsuarios","mensajesDeErrorListarUsuarios","formatoFecha","fecha","fechaRecibida","Date","dia","getUTCDate","mes","getUTCMonth","ano","getFullYear"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,qBAApC;AAEA,OAAO,MAAMC,eAAe,GAAGC,SAAS,IAAI;AACxC,MAAIC,MAAM,GAAGC,cAAc,CAACF,SAAD,CAA3B;;AACA,MAAIC,MAAM,KAAK,EAAf,EAAmB,CAElB,CAFD,MAEO;AACH,WAAOA,MAAP;AACH;;AACD,UAAQD,SAAR;AACI,SAAK,iBAAL;AACI,aAAO,iBAAP;;AACJ,SAAK,aAAL;AACI,aAAO,aAAP;;AACJ,SAAK,eAAL;AACI,aAAO,iBAAP;;AACJ,SAAK,qBAAL;AACI,aAAO,iBAAP;;AACJ,SAAK,kBAAL;AACI,aAAO,iBAAP;;AACJ,SAAK,uCAAL;AACI,aAAO,iBAAP;;AACJ;AACI,aAAO,EAAP;AAdR;AAgBH,CAvBM;AAyBP,OAAO,MAAMG,4BAA4B,GAAGH,SAAS,IAAI;AACrD,MAAIC,MAAM,GAAGC,cAAc,CAACF,SAAD,CAA3B;;AACA,MAAIC,MAAM,KAAK,EAAf,EAAmB;AACf,YAAQD,SAAR;AACI,WAAK,iCAAL;AACI,eAAO,iCAAP;;AACJ,WAAK,kDAAL;AACI,eAAO,iCAAP;;AACJ,WAAK,2BAAL;AACI,eAAO,2BAAP;;AACJ,WAAK,gBAAL;AACI,eAAOA,SAAP;AARR;AAUH,GAXD,MAWO;AACH,WAAOC,MAAP;AACH;AACJ,CAhBM;AAkBP,OAAO,MAAMG,+BAA+B,GAAGJ,SAAS,IAAI;AACxD,MAAIC,MAAM,GAAGC,cAAc,CAACF,SAAD,CAA3B;;AACA,MAAIC,MAAM,KAAK,EAAf,EAAmB;AACf,YAAQD,SAAR;AACI,WAAK,iCAAL;AACI,eAAO,iCAAP;;AACJ,WAAK,oDAAL;AACI,eAAOA,SAAP;;AACJ,WAAK,8DAAL;AACI,eAAOA,SAAP;;AACJ,WAAK,wCAAL;AACI,eAAO,iCAAP;AARR;AAUH,GAXD,MAWO;AACH,WAAOC,MAAP;AACH;AACJ,CAhBM;AAmBP,OAAO,MAAMI,6BAA6B,GAAGL,SAAS,IAAI;AACtD,MAAIC,MAAM,GAAGC,cAAc,CAACF,SAAD,CAA3B;;AACA,MAAIC,MAAM,KAAK,EAAf,EAAmB;AACf,YAAQD,SAAR;AACI,WAAK,iCAAL;AACI,eAAO,iCAAP;;AACJ,WAAK,yBAAL;AACI,eAAOA,SAAP;;AACJ,WAAK,kDAAL;AACI,eAAO,iCAAP;AANR;AAQH,GATD,MASO;AACH,WAAOC,MAAP;AACH;AACJ,CAdM;;AAiBP,MAAMC,cAAc,GAAGF,SAAS,IAAI;AAChC,UAAQA,SAAR;AACI,SAAK,iBAAL;AACI,aAAO,iBAAP;;AACJ,SAAK,aAAL;AACI,aAAO,aAAP;;AACJ,SAAK,eAAL;AACI,aAAO,iBAAP;;AACJ,SAAK,qBAAL;AACI,aAAO,iBAAP;;AACJ,SAAK,kBAAL;AACI,aAAO,iBAAP;;AACJ;AACI,aAAO,EAAP;AAZR;AAcH,CAfD;;AAkBA,OAAO,MAAMM,YAAY,GAAIC,KAAD,IAAW;AACnC,MAAIC,aAAa,GAAG,IAAIC,IAAJ,CAASF,KAAT,CAApB;AACA,MAAIG,GAAG,GAAGF,aAAa,CAACG,UAAd,EAAV;AACA,MAAIC,GAAG,GAAGJ,aAAa,CAACK,WAAd,EAAV;AACA,MAAIC,GAAG,GAAGN,aAAa,CAACO,WAAd,EAAV;AACA,SAAO,IAAIN,IAAJ,CAASK,GAAT,EAAcF,GAAd,EAAmBF,GAAnB,CAAP;AACH,CANM","sourcesContent":["import { NotificationManager } from 'react-notifications';\r\n\r\nexport const mensajesDeError = respuesta => {\r\n    let filtro = mensajesFiltro(respuesta);\r\n    if (filtro === '') {\r\n\r\n    } else {\r\n        return filtro;\r\n    }\r\n    switch (respuesta) {\r\n        case 'Token requerido':\r\n            return 'Token requerido';\r\n        case 'Sin permiso':\r\n            return 'Sin permiso';\r\n        case 'token vencido':\r\n            return 'Token requerido';\r\n        case 'token no registrado':\r\n            return 'Token requerido';\r\n        case 'token incorrecto':\r\n            return 'Token requerido';\r\n        case 'Ocurrio un error interno del servidor':\r\n            return 'Token requerido';\r\n        default:\r\n            return '';\r\n    }\r\n};\r\n\r\nexport const mensajesDeErrorModulosAcceso = respuesta => {\r\n    let filtro = mensajesFiltro(respuesta);\r\n    if (filtro === '') {\r\n        switch (respuesta) {\r\n            case 'Ocurrio un error en el servidor':\r\n                return 'Ocurrio un error en el servidor';\r\n            case 'Ocurrio un error al momento de hacer la consulta':\r\n                return 'Ocurrio un error en el servidor';\r\n            case 'No hay permisos asociados':\r\n                return 'No hay permisos asociados';\r\n            case 'sesion cerrada':\r\n                return respuesta;\r\n        }\r\n    } else {\r\n        return filtro;\r\n    }\r\n};\r\n\r\nexport const mensajesDeErrorRegistroUsuarios = respuesta => {\r\n    let filtro = mensajesFiltro(respuesta);\r\n    if (filtro === '') {\r\n        switch (respuesta) {\r\n            case 'Ocurrio un error en el servidor':\r\n                return 'Ocurrio un error en el servidor';\r\n            case 'El correo o numero de documento ya esta registrado':\r\n                return respuesta;\r\n            case 'Ocurrio un error al momento de hacer el registro del usuario':\r\n                return respuesta;\r\n            case 'No se encontro ningun dato coincidente':\r\n                return 'Ocurrio un error en el servidor';\r\n        }\r\n    } else {\r\n        return filtro;\r\n    }\r\n};\r\n\r\n\r\nexport const mensajesDeErrorListarUsuarios = respuesta => {\r\n    let filtro = mensajesFiltro(respuesta);\r\n    if (filtro === '') {\r\n        switch (respuesta) {\r\n            case 'Ocurrio un error en el servidor':\r\n                return 'Ocurrio un error en el servidor';\r\n            case 'No se encontraron datos':\r\n                return respuesta;\r\n            case 'Ocurrio un error al momento de hacer la consulta':\r\n                return 'Ocurrio un error en el servidor';\r\n        }\r\n    } else {\r\n        return filtro;\r\n    }\r\n};\r\n\r\n\r\nconst mensajesFiltro = respuesta => {\r\n    switch (respuesta) {\r\n        case 'Token requerido':\r\n            return 'Token requerido';\r\n        case 'Sin permiso':\r\n            return 'Sin permiso';\r\n        case 'token vencido':\r\n            return 'Token requerido';\r\n        case 'token no registrado':\r\n            return 'Token requerido';\r\n        case 'token incorrecto':\r\n            return 'Token requerido';\r\n        default:\r\n            return '';\r\n    }\r\n}\r\n\r\n\r\nexport const formatoFecha = (fecha) => {\r\n    let fechaRecibida = new Date(fecha);\r\n    let dia = fechaRecibida.getUTCDate();\r\n    let mes = fechaRecibida.getUTCMonth();\r\n    let ano = fechaRecibida.getFullYear();\r\n    return new Date(ano, mes, dia);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}