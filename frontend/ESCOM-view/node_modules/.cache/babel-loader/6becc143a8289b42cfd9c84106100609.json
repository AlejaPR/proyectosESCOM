{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jeiso\\\\Desktop\\\\proyectosESCOM\\\\frontend\\\\ESCOM-view\\\\src\\\\SuperAdministrador\\\\componentes\\\\popup\\\\PopUpModulo.js\";\nimport React from 'react';\nimport 'react-notifications/lib/notifications.css';\nimport Button from '@material-ui/core/Button';\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\nimport Defecto from '../../imagenes/defecto.jpg';\nimport PropTypes from \"prop-types\";\nimport { requerido, validacionCuarentaCaracteres, validacionDoscientosCaracteres } from '../../utilitario/validacionCampos.js';\nimport AddIcon from '@material-ui/icons/Add';\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\nimport { generarInput, generarTextArea } from '../../utilitario/GenerarInputs.js';\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport { withRouter } from 'react-router-dom';\nimport { Field, reduxForm } from \"redux-form\";\nimport { actionAgregarModulo, actualizarMensajeRegistrar } from '../../actions/actionsModulo.js';\nimport { connect } from 'react-redux';\n\nclass PopUpModulo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.validateImageWeight = imageFile => {\n      if (imageFile && imageFile.size) {\n        const imageFileKb = imageFile.size / 1024;\n        const pesoMaximo = this.props.pesoMaximo;\n\n        if (imageFileKb > pesoMaximo) {\n          return `El tamaÃ±o de la imagen debe ser menor o igual a ${pesoMaximo}kb`;\n        }\n      }\n    };\n\n    this.validateImageWidth = imageFile => {\n      if (imageFile) {\n        const anchuraMaxima = this.props.anchuraMaxima;\n\n        if (imageFile.width > anchuraMaxima) {\n          return `El ancho de la imagen debe ser menor o igual a ${anchuraMaxima}px`;\n        }\n      }\n    };\n\n    this.validateImageHeight = imageFile => {\n      if (imageFile) {\n        const alturaMaxima = this.props.alturaMaxima;\n\n        if (imageFile.height > alturaMaxima) {\n          return `La altura de la imagen debe ser menor o igual a ${alturaMaxima}px`;\n        }\n      }\n    };\n\n    this.validateImageFormat = imageFile => {\n      if (imageFile) {\n        const tipoDeImagen = this.props.tipoDeImagen;\n\n        if (!tipoDeImagen.includes(imageFile.type)) {\n          return `El tipo de imagen debe ser ${tipoDeImagen}`;\n        }\n      }\n    };\n\n    this.handlePreview = imageUrl => {\n      const previewImageDom = document.querySelector(\".preview-image\");\n      previewImageDom.src = imageUrl;\n    };\n\n    this.handleChange = (event, input) => {\n      event.preventDefault();\n      let imageFile = event.target.files[0];\n      const tipoDeImagen = this.props.tipoDeImagen;\n\n      if (imageFile) {\n        if (!tipoDeImagen.includes(imageFile.type)) {\n          NotificationManager.error('Seleccione un archivo de imagen .jpg o .png');\n          event.target.value = null;\n        } else {\n          const localImageUrl = URL.createObjectURL(imageFile);\n          const imageObject = new window.Image();\n\n          imageObject.onload = () => {\n            imageFile.width = imageObject.naturalWidth;\n            imageFile.height = imageObject.naturalHeight;\n            input.onChange(imageFile);\n            URL.revokeObjectURL(imageFile);\n          };\n\n          imageObject.src = localImageUrl;\n          this.handlePreview(localImageUrl);\n        }\n      }\n    };\n\n    this.renderFileInput = ({\n      input,\n      type,\n      meta\n    }) => {\n      const tipoDeImagen = this.props.tipoDeImagen;\n      const touched = meta.touched,\n            error = meta.error,\n            warning = meta.warning;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        id: \"numeroUno\",\n        style: {\n          display: 'none'\n        },\n        name: input.name,\n        type: type,\n        accept: tipoDeImagen,\n        onChange: event => this.handleChange(event, input),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"numeroUno\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(Button, {\n        component: \"span\",\n        startIcon: React.createElement(PhotoCamera, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \"Seleccionar imagen\")), touched && (error && React.createElement(\"span\", {\n        className: \"text-danger letra form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, error) || warning && React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, warning)));\n    };\n\n    this.handleSubmitForm = values => {\n      if (!(values.image === undefined | values.image === null)) {\n        this.getBase64(values.image, result => {\n          let modulo = {\n            nombreModulo: values.nombre,\n            descripcionModulo: values.descripcion,\n            imagenModulo: result,\n            estadoModulo: 'Activo'\n          };\n          this.props.actionAgregarModulo(modulo, localStorage.getItem('Token'));\n        });\n      } else {\n        NotificationManager.error('Seleccione un archivo de imagen .jpg o .png');\n      }\n    };\n\n    this.state = {\n      modal: false\n    };\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n    this.props.reset();\n  }\n\n  componentDidUpdate() {\n    if (this.props.mensajeRegistrar !== '') {\n      switch (this.props.mensaje) {\n        case 'modulo registrado':\n          NotificationManager.success('Modulo registrado correctamente');\n          break;\n\n        case 'Sin permiso':\n          NotificationManager.error('No tiene los permisos suficientes para registrar un modulo');\n          this.props.reset();\n          this.props.actualizarMensajeRegistrar('');\n          break;\n\n        default:\n          break;\n      }\n    }\n  }\n\n  getBase64(file, cb) {\n    let reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    reader.onload = function () {\n      cb(reader.result);\n    };\n\n    reader.onerror = function (error) {\n      console.log('Error: ', error);\n    };\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(Button, {\n      style: {\n        background: this.props.configuracion.botones,\n        fontSize: \"14px\",\n        textTransform: \"none\"\n      },\n      variant: \"contained\",\n      startIcon: React.createElement(AddIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }),\n      className: \"btn btn-dark\",\n      onClick: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"Registrar modulo\"), React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      style: {\n        width: \"400px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      style: {\n        height: \"50px\",\n        width: \"400px\"\n      },\n      className: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"Registrar modulo\"), React.createElement(ModalBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        padding: \"30px 30px 30px 77px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: Defecto,\n      alt: \"preview\",\n      className: \"preview-image\",\n      style: {\n        height: \"200px\",\n        width: \"200px\",\n        borderRadius: \"50%\",\n        objectFit: \"cover\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    })), React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.handleSubmitForm),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"image\",\n      type: \"file\",\n      validate: [this.validateImageWeight, this.validateImageFormat],\n      component: this.renderFileInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-sm-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"nombre\",\n      validate: [requerido, validacionCuarentaCaracteres],\n      component: generarInput,\n      label: \"Nombre\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-sm-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"descripcion\",\n      validate: [requerido, validacionDoscientosCaracteres],\n      filas: 4,\n      component: generarTextArea,\n      label: \"Descripcion\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }))), React.createElement(ModalFooter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"submit\",\n      startIcon: React.createElement(SaveAltIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }),\n      className: \"btn btn-dark\",\n      style: {\n        background: this.props.configuracion.botones,\n        fontSize: \"13px\",\n        textTransform: \"none\"\n      },\n      variant: \"contained\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, \"Registrar\"), React.createElement(Button, {\n      startIcon: React.createElement(CancelIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }),\n      style: fondoBotonCancelar,\n      className: \"btn btn-dark\",\n      variant: \"contained\",\n      onClick: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, \"Cancelar\"))))), React.createElement(NotificationContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }));\n  }\n\n}\n\nPopUpModulo.propTypes = {\n  previewLogoUrl: PropTypes.string,\n  tipoDeImagen: PropTypes.string,\n  pesoMaximo: PropTypes.number,\n  anchuraMaxima: PropTypes.number,\n  alturaMaxima: PropTypes.number,\n  handleSubmit: PropTypes.func.isRequired\n};\nPopUpModulo.defaultProps = {\n  previewLogoUrl: \"https://imgplaceholder.com/400x300\",\n  tipoDeImagen: \"image/jpeg, image/png\",\n  pesoMaximo: 100,\n  anchuraMaxima: 100,\n  alturaMaxima: 100\n};\nconst fondoBotonCancelar = {\n  background: \"gray\",\n  fontFamily: \"sans-serif\",\n  fontSize: \"13px\",\n  textTransform: \"none\"\n};\n\nfunction mapStateToProps(state) {\n  return {\n    mensaje: state.mod.mensajeRegistrarModulo,\n    configuracion: state.conf.configuracion\n  };\n}\n\nlet formularioModulo = reduxForm({\n  form: \"formularioModulo\"\n})(PopUpModulo);\nexport default withRouter(connect(mapStateToProps, {\n  actionAgregarModulo,\n  actualizarMensajeRegistrar\n})(formularioModulo));","map":{"version":3,"sources":["C:/Users/jeiso/Desktop/proyectosESCOM/frontend/ESCOM-view/src/SuperAdministrador/componentes/popup/PopUpModulo.js"],"names":["React","Button","Modal","ModalHeader","ModalBody","ModalFooter","NotificationContainer","NotificationManager","Defecto","PropTypes","requerido","validacionCuarentaCaracteres","validacionDoscientosCaracteres","AddIcon","PhotoCamera","generarInput","generarTextArea","SaveAltIcon","CancelIcon","withRouter","Field","reduxForm","actionAgregarModulo","actualizarMensajeRegistrar","connect","PopUpModulo","Component","constructor","props","validateImageWeight","imageFile","size","imageFileKb","pesoMaximo","validateImageWidth","anchuraMaxima","width","validateImageHeight","alturaMaxima","height","validateImageFormat","tipoDeImagen","includes","type","handlePreview","imageUrl","previewImageDom","document","querySelector","src","handleChange","event","input","preventDefault","target","files","error","value","localImageUrl","URL","createObjectURL","imageObject","window","Image","onload","naturalWidth","naturalHeight","onChange","revokeObjectURL","renderFileInput","meta","touched","warning","display","name","handleSubmitForm","values","image","undefined","getBase64","result","modulo","nombreModulo","nombre","descripcionModulo","descripcion","imagenModulo","estadoModulo","localStorage","getItem","state","modal","toggle","bind","setState","prevState","reset","componentDidUpdate","mensajeRegistrar","mensaje","success","file","cb","reader","FileReader","readAsDataURL","onerror","console","log","render","background","configuracion","botones","fontSize","textTransform","padding","borderRadius","objectFit","handleSubmit","fondoBotonCancelar","propTypes","previewLogoUrl","string","number","func","isRequired","defaultProps","fontFamily","mapStateToProps","mod","mensajeRegistrarModulo","conf","formularioModulo","form"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nimport 'react-notifications/lib/notifications.css';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\r\nimport Defecto from '../../imagenes/defecto.jpg';\r\nimport PropTypes from \"prop-types\";\r\nimport { requerido, validacionCuarentaCaracteres, validacionDoscientosCaracteres } from '../../utilitario/validacionCampos.js';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\r\nimport { generarInput, generarTextArea } from '../../utilitario/GenerarInputs.js'\r\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\n\r\nimport { withRouter } from 'react-router-dom';\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { actionAgregarModulo,actualizarMensajeRegistrar } from '../../actions/actionsModulo.js';\r\nimport { connect } from 'react-redux';\r\n\r\nclass PopUpModulo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      modal: false\r\n    };\r\n    this.toggle = this.toggle.bind(this);\r\n  }\r\n  toggle() {\r\n    this.setState(prevState => ({\r\n      modal: !prevState.modal\r\n    }));\r\n    this.props.reset();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.props.mensajeRegistrar !== '') {\r\n      switch (this.props.mensaje) {\r\n        case 'modulo registrado':\r\n          NotificationManager.success('Modulo registrado correctamente');\r\n          break;\r\n        case 'Sin permiso':\r\n          NotificationManager.error('No tiene los permisos suficientes para registrar un modulo');\r\n          this.props.reset();\r\n          this.props.actualizarMensajeRegistrar('');\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  static propTypes = {\r\n    previewLogoUrl: PropTypes.string,\r\n    tipoDeImagen: PropTypes.string,\r\n    pesoMaximo: PropTypes.number,\r\n    anchuraMaxima: PropTypes.number,\r\n    alturaMaxima: PropTypes.number,\r\n    handleSubmit: PropTypes.func.isRequired\r\n  };\r\n\r\n  static defaultProps = {\r\n    previewLogoUrl: \"https://imgplaceholder.com/400x300\",\r\n    tipoDeImagen: \"image/jpeg, image/png\",\r\n    pesoMaximo: 100,\r\n    anchuraMaxima: 100,\r\n    alturaMaxima: 100\r\n  };\r\n  validateImageWeight = imageFile => {\r\n    if (imageFile && imageFile.size) {\r\n      const imageFileKb = imageFile.size / 1024;\r\n      const { pesoMaximo } = this.props;\r\n\r\n      if (imageFileKb > pesoMaximo) {\r\n        return `El tamaÃ±o de la imagen debe ser menor o igual a ${pesoMaximo}kb`;\r\n      }\r\n    }\r\n  };\r\n  validateImageWidth = imageFile => {\r\n    if (imageFile) {\r\n      const { anchuraMaxima } = this.props;\r\n      if (imageFile.width > anchuraMaxima) {\r\n        return `El ancho de la imagen debe ser menor o igual a ${anchuraMaxima}px`;\r\n      }\r\n    }\r\n  };\r\n  validateImageHeight = imageFile => {\r\n    if (imageFile) {\r\n      const { alturaMaxima } = this.props;\r\n\r\n      if (imageFile.height > alturaMaxima) {\r\n        return `La altura de la imagen debe ser menor o igual a ${alturaMaxima}px`;\r\n      }\r\n    }\r\n  };\r\n\r\n  validateImageFormat = imageFile => {\r\n    if (imageFile) {\r\n      const { tipoDeImagen } = this.props;\r\n      if (!tipoDeImagen.includes(imageFile.type)) {\r\n        return `El tipo de imagen debe ser ${tipoDeImagen}`;\r\n      }\r\n    }\r\n  };\r\n\r\n  handlePreview = imageUrl => {\r\n    const previewImageDom = document.querySelector(\".preview-image\");\r\n    previewImageDom.src = imageUrl;\r\n  };\r\n\r\n  handleChange = (event, input) => {\r\n    event.preventDefault();\r\n    let imageFile = event.target.files[0];\r\n    const { tipoDeImagen } = this.props;\r\n    if (imageFile) {\r\n      if (!tipoDeImagen.includes(imageFile.type)) {\r\n        NotificationManager.error('Seleccione un archivo de imagen .jpg o .png');\r\n        event.target.value = null;\r\n      } else {\r\n\r\n        const localImageUrl = URL.createObjectURL(imageFile);\r\n        const imageObject = new window.Image();\r\n\r\n        imageObject.onload = () => {\r\n          imageFile.width = imageObject.naturalWidth;\r\n          imageFile.height = imageObject.naturalHeight;\r\n          input.onChange(imageFile);\r\n          URL.revokeObjectURL(imageFile);\r\n        };\r\n        imageObject.src = localImageUrl;\r\n        this.handlePreview(localImageUrl);\r\n      }\r\n    }\r\n  };\r\n\r\n  renderFileInput = ({ input, type, meta }) => {\r\n    const { tipoDeImagen } = this.props;\r\n    const { touched, error, warning } = meta;\r\n    return (\r\n      <div>\r\n        <input\r\n          id=\"numeroUno\"\r\n          style={{ display: 'none' }}\r\n          name={input.name}\r\n          type={type}\r\n          accept={tipoDeImagen}\r\n          onChange={event => this.handleChange(event, input)}\r\n        />\r\n        <label htmlFor=\"numeroUno\">\r\n          <Button component=\"span\" startIcon={<PhotoCamera />}>Seleccionar imagen</Button>\r\n        </label>\r\n        {touched && ((error && <span className=\"text-danger letra form-group\">{error}</span>) || (warning && <span>{warning}</span>))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n\r\n  handleSubmitForm = values => {\r\n    if (!(values.image === undefined | values.image === null)) {\r\n      this.getBase64(values.image, (result) => {\r\n        let modulo = {\r\n          nombreModulo: values.nombre,\r\n          descripcionModulo: values.descripcion,\r\n          imagenModulo: result,\r\n          estadoModulo: 'Activo'\r\n        }\r\n        this.props.actionAgregarModulo(modulo, localStorage.getItem('Token'));\r\n      });\r\n    } else {\r\n      NotificationManager.error('Seleccione un archivo de imagen .jpg o .png');\r\n    }\r\n  };\r\n\r\n  getBase64(file, cb) {\r\n    let reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = function () {\r\n      cb(reader.result)\r\n    };\r\n    reader.onerror = function (error) {\r\n      console.log('Error: ', error);\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Button style={{ background: this.props.configuracion.botones, fontSize: \"14px\", textTransform: \"none\" }} variant=\"contained\" startIcon={<AddIcon />} className=\"btn btn-dark\" onClick={this.toggle}>Registrar modulo</Button>\r\n        <Modal isOpen={this.state.modal}\r\n          toggle={this.toggle}\r\n          style={{ width: \"400px\" }}\r\n        >\r\n          <ModalHeader toggle={this.toggle} style={{ height: \"50px\", width: \"400px\" }} className=\"center\">Registrar modulo</ModalHeader>\r\n          <ModalBody>\r\n            <div style={{ padding: \"30px 30px 30px 77px\" }}>\r\n              <img src={Defecto} alt=\"preview\"\r\n                className=\"preview-image\"\r\n                style={{ height: \"200px\", width: \"200px\", borderRadius: \"50%\", objectFit: \"cover\" }} />\r\n            </div>\r\n            <form onSubmit={this.props.handleSubmit(this.handleSubmitForm)}>\r\n\r\n              <Field\r\n                name=\"image\"\r\n                type=\"file\"\r\n                validate={[\r\n                  this.validateImageWeight,\r\n                  this.validateImageFormat\r\n                ]}\r\n                component={this.renderFileInput}\r\n              />\r\n              <br />\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-12\">\r\n                  <Field name=\"nombre\" validate={[requerido, validacionCuarentaCaracteres]} component={generarInput} label=\"Nombre\" />\r\n                </div>\r\n              </div>\r\n              <br />\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-12\">\r\n                  <Field name=\"descripcion\" validate={[requerido, validacionDoscientosCaracteres]} filas={4} component={generarTextArea} label=\"Descripcion\" />\r\n                </div>\r\n              </div>\r\n              <ModalFooter>\r\n                <Button\r\n                  type=\"submit\"\r\n                  startIcon={<SaveAltIcon />}\r\n                  className=\"btn btn-dark\"\r\n                  style={{ background: this.props.configuracion.botones, fontSize: \"13px\", textTransform: \"none\" }}\r\n                  variant=\"contained\">\r\n                  Registrar\r\n                </Button>\r\n                <Button\r\n                  startIcon={<CancelIcon />}\r\n                  style={fondoBotonCancelar}\r\n                  className=\"btn btn-dark\"\r\n                  variant=\"contained\"\r\n                  onClick={this.toggle}>\r\n                  Cancelar</Button>\r\n              </ModalFooter>\r\n            </form>\r\n          </ModalBody>\r\n        </Modal>\r\n        <NotificationContainer />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst fondoBotonCancelar = {\r\n  background: \"gray\",\r\n  fontFamily: \"sans-serif\",\r\n  fontSize: \"13px\",\r\n  textTransform: \"none\"\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    mensaje: state.mod.mensajeRegistrarModulo,\r\n    configuracion: state.conf.configuracion\r\n\r\n  }\r\n}\r\n\r\n\r\nlet formularioModulo = reduxForm({\r\n  form: \"formularioModulo\"\r\n})(PopUpModulo);\r\n\r\nexport default withRouter(connect(mapStateToProps, { actionAgregarModulo ,actualizarMensajeRegistrar})(formularioModulo));\r\n"]},"metadata":{},"sourceType":"module"}