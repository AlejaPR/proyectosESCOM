{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jeiso\\\\Desktop\\\\proyectosESCOM\\\\frontend\\\\ESCOM-view\\\\src\\\\SuperAdministrador\\\\componentes\\\\color.js\";\nimport React, { PureComponent } from 'react';\nimport { Button } from 'reactstrap'; // npm i jspdf\n\nimport jsPDF from 'jspdf'; // npm i jspdf-autotable\n\nimport 'jspdf-autotable';\nexport default class pdfGenerate extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.jsPdfGenerator = () => {\n      let data = [];\n      let col = [{\n        dataKey: 'count',\n        header: 'Count'\n      }, {\n        dataKey: 'c1',\n        header: 'C1'\n      }, {\n        dataKey: 'c2',\n        header: 'C2'\n      }, {\n        dataKey: 'c3',\n        header: 'C3'\n      }, {\n        dataKey: 'c4',\n        header: 'C4'\n      }];\n      let count = 1;\n      var doc = new jsPDF('p', 'pt');\n      doc.page = 1;\n      var width = doc.internal.pageSize.getWidth();\n      var height = doc.internal.pageSize.getHeight();\n\n      var header = function () {\n        var imgData = // Convert the image to base64 and place it here // \n        doc.setFontStyle('normal'); // move_from_left, move_from_height, width, height \n\n        doc.addImage(imgData, 'JPEG', 5, 10, width - 10, 65);\n        doc.setFontSize(14);\n        doc.setFontStyle('bold'); // move_from_left, move_from_height\n\n        doc.text(200, 100, 'Something something');\n      };\n\n      var footer = function () {\n        var imgData = undefined; // Convert the image to base64 and place it here // \n        //print number bottom right\n\n        doc.setFontSize(7);\n        doc.text(width - 40, height - 30, 'Page - ' + doc.page);\n        doc.page++; //_________________________________\n\n        doc.addImage(imgData, 'JPEG', 5, height - 25, width - 10, 30);\n      };\n\n      var options = {\n        beforePageContent: header,\n        afterPageContent: footer,\n        theme: 'grid',\n        columnStyles: {\n          count: {\n            columnWidth: 30\n          },\n          c1: {\n            columnWidth: 50\n          },\n          c2: {\n            columnWidth: 80\n          },\n          c3: {\n            columnWidth: 30\n          },\n          c4: {\n            columnWidth: 50,\n            halign: 'right'\n          }\n        },\n        headStyles: {\n          fillColor: 'white',\n          textColor: 'black'\n        },\n        style: {\n          cellWidth: 'auto'\n        },\n        margin: {\n          top: 150,\n          bottom: 100,\n          horizontal: 10\n        }\n      }; // Data Processing\n\n      this.state.array1.map((item, index) => {\n        let b = {\n          count: count,\n          c1: item.c1,\n          c2: item.c2,\n          c3: item.c3,\n          c4: item.c4\n        };\n        count++;\n        data.push(b);\n      });\n      doc.setFontSize(12);\n      doc.line(0, 145, width, 145);\n      doc.autoTable(col, data, options);\n      doc.save('Generate.pdf');\n    };\n\n    this.state = {\n      array1: ['p']\n    };\n  } // JSpdf Generator For generating the PDF\n\n\n  render() {\n    return React.createElement(Button, {\n      onClick: this.jsPdfGenerator,\n      type: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \" Generate PDF \");\n  }\n\n}","map":{"version":3,"sources":["C:/Users/jeiso/Desktop/proyectosESCOM/frontend/ESCOM-view/src/SuperAdministrador/componentes/color.js"],"names":["React","PureComponent","Button","jsPDF","pdfGenerate","constructor","props","jsPdfGenerator","data","col","dataKey","header","count","doc","page","width","internal","pageSize","getWidth","height","getHeight","imgData","setFontStyle","addImage","setFontSize","text","footer","undefined","options","beforePageContent","afterPageContent","theme","columnStyles","columnWidth","c1","c2","c3","c4","halign","headStyles","fillColor","textColor","style","cellWidth","margin","top","bottom","horizontal","state","array1","map","item","index","b","push","line","autoTable","save","render"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport { Button,  } from 'reactstrap';\r\n\r\n// npm i jspdf\r\nimport jsPDF from 'jspdf'\r\n\r\n// npm i jspdf-autotable\r\nimport 'jspdf-autotable';\r\n\r\nexport default class pdfGenerate extends PureComponent {\r\n    constructor(props){\r\n        super(props)\r\n        this.state ={\r\n            array1: ['p']\r\n        }\r\n    }\r\n  \r\n    // JSpdf Generator For generating the PDF\r\n    jsPdfGenerator = () => {\r\n\r\n        let data = [];\r\n        let col = [\r\n                { dataKey: 'count', header: 'Count' },\r\n                { dataKey: 'c1', header: 'C1' },\r\n                { dataKey: 'c2', header: 'C2' },\r\n                { dataKey: 'c3', header: 'C3' },\r\n                { dataKey: 'c4', header: 'C4' },\r\n            ]\r\n        let count = 1;\r\n    \r\n        var doc = new jsPDF('p', 'pt');\r\n        doc.page=1;\r\n\r\n        var width   = doc.internal.pageSize.getWidth();\r\n        var height  = doc.internal.pageSize.getHeight(); \r\n\r\n        var header = function () {\r\n             \r\n            var imgData =  // Convert the image to base64 and place it here // \r\n\r\n            doc.setFontStyle('normal');\r\n            \r\n            // move_from_left, move_from_height, width, height \r\n            doc.addImage(imgData, 'JPEG', 5, 10, width-10, 65)\r\n\r\n            doc.setFontSize(14);\r\n            doc.setFontStyle('bold');\r\n\r\n            // move_from_left, move_from_height\r\n            doc.text(200, 100, 'Something something')\r\n        };\r\n\r\n        var footer = function () {\r\n            var imgData =undefined; // Convert the image to base64 and place it here // \r\n\r\n            //print number bottom right\r\n            \r\n            doc.setFontSize(7);\r\n            doc.text(width-40, height - 30, 'Page - ' + doc.page); \r\n            doc.page ++;\r\n\r\n            //_________________________________\r\n            \r\n            doc.addImage(imgData, 'JPEG', 5, height - 25, width-10, 30)\r\n        };\r\n\r\n\r\n\r\n        var options = {\r\n            beforePageContent: header,\r\n            afterPageContent: footer,\r\n            theme: 'grid',\r\n            columnStyles: {\r\n                count:          {columnWidth: 30, },\r\n                c1:             {columnWidth: 50},\r\n                c2:             {columnWidth: 80},\r\n                c3:             {columnWidth: 30},\r\n                c4:             {columnWidth: 50, halign: 'right'},\r\n            },\r\n            \r\n            headStyles: {fillColor: 'white', textColor: 'black'},\r\n            style: {cellWidth: 'auto'},\r\n            margin: {top: 150, bottom: 100, horizontal: 10},\r\n        }\r\n        \r\n\r\n        // Data Processing\r\n        this.state.array1.map( (item, index) => {\r\n            let b = {\r\n                    count: count,\r\n                    c1: item.c1,\r\n                    c2: item.c2,\r\n                    c3: item.c3,\r\n                    c4: item.c4,\r\n                }\r\n\r\n            count++;\r\n            data.push(b);\r\n        })\r\n\r\n\r\n        doc.setFontSize(12)\r\n        doc.line(0, 145, width, 145)\r\n\r\n        doc.autoTable(col, data, options)\r\n\r\n        doc.save('Generate.pdf')\r\n    }\r\n\r\n  \r\n    render(){\r\n      return(\r\n         <Button onClick={this.jsPdfGenerator} type=\"primary\"> Generate PDF </Button> \r\n        )\r\n     }\r\n  \r\n  \r\n}"]},"metadata":{},"sourceType":"module"}