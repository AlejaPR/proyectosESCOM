{"ast":null,"code":"import Paginator from \"paginator\";\nexport const pagination = (currentPage, pageSize, dataSet) => {\n  console.log('datos que llegaron', dataSet);\n  let paginator = new Paginator(pageSize, 5);\n  let paginatorData = paginator.build(dataSet.length, currentPage);\n  let pages = [...Array(paginatorData.last_page + 1 - paginatorData.first_page).keys()].map(index => paginatorData.first_page + index);\n  let paginatedData = dataSet.slice(paginatorData.first_result, paginatorData.last_result + 1);\n  let data = {\n    paginatedData,\n    paginatorData,\n    pages\n  };\n  return data;\n};\nexport const filteredItem = (text, filteredBy, pageSize, dataSet) => {\n  let filteredData = dataSet.filter(data => data[filteredBy].toLowerCase().includes(text));\n  let paginator = new Paginator(pageSize, 7);\n  let paginatorData = paginator.build(filteredData.length, 1);\n  let pages = [...Array(paginatorData.last_page + 1 - paginatorData.first_page).keys()].map(index => paginatorData.first_page + index);\n  let paginatedData = filteredData.slice(paginatorData.first_result, paginatorData.last_result + 1);\n  let data = {\n    paginatedData,\n    paginatorData,\n    pages,\n    filteredData\n  };\n  return data;\n};","map":{"version":3,"sources":["C:/Users/jeiso/Desktop/REACT/proyectosESCOM/frontend/ESCOM-view/src/SuperAdministrador/utilitario/DataTable.js"],"names":["Paginator","pagination","currentPage","pageSize","dataSet","console","log","paginator","paginatorData","build","length","pages","Array","last_page","first_page","keys","map","index","paginatedData","slice","first_result","last_result","data","filteredItem","text","filteredBy","filteredData","filter","toLowerCase","includes"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,WAAtB;AAEA,OAAO,MAAMC,UAAU,GAAG,CAACC,WAAD,EAAcC,QAAd,EAAwBC,OAAxB,KAAoC;AAC5DC,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAiCF,OAAjC;AACA,MAAIG,SAAS,GAAG,IAAIP,SAAJ,CAAcG,QAAd,EAAwB,CAAxB,CAAhB;AACA,MAAIK,aAAa,GAAGD,SAAS,CAACE,KAAV,CAAgBL,OAAO,CAACM,MAAxB,EAAgCR,WAAhC,CAApB;AACA,MAAIS,KAAK,GAAG,CACV,GAAGC,KAAK,CAACJ,aAAa,CAACK,SAAd,GAA0B,CAA1B,GAA8BL,aAAa,CAACM,UAA7C,CAAL,CAA8DC,IAA9D,EADO,EAEVC,GAFU,CAENC,KAAK,IAAIT,aAAa,CAACM,UAAd,GAA2BG,KAF9B,CAAZ;AAGA,MAAIC,aAAa,GAAGd,OAAO,CAACe,KAAR,CAClBX,aAAa,CAACY,YADI,EAElBZ,aAAa,CAACa,WAAd,GAA4B,CAFV,CAApB;AAIA,MAAIC,IAAI,GAAG;AACTJ,IAAAA,aADS;AAETV,IAAAA,aAFS;AAGTG,IAAAA;AAHS,GAAX;AAKA,SAAOW,IAAP;AACD,CAjBM;AAmBP,OAAO,MAAMC,YAAY,GAAG,CAACC,IAAD,EAAOC,UAAP,EAAmBtB,QAAnB,EAA6BC,OAA7B,KAAyC;AACnE,MAAIsB,YAAY,GAAGtB,OAAO,CAACuB,MAAR,CACjBL,IAAI,IAAIA,IAAI,CAACG,UAAD,CAAJ,CAAiBG,WAAjB,GAA+BC,QAA/B,CAAwCL,IAAxC,CADS,CAAnB;AAGA,MAAIjB,SAAS,GAAG,IAAIP,SAAJ,CAAcG,QAAd,EAAwB,CAAxB,CAAhB;AACA,MAAIK,aAAa,GAAGD,SAAS,CAACE,KAAV,CAAgBiB,YAAY,CAAChB,MAA7B,EAAqC,CAArC,CAApB;AACA,MAAIC,KAAK,GAAG,CACV,GAAGC,KAAK,CAACJ,aAAa,CAACK,SAAd,GAA0B,CAA1B,GAA8BL,aAAa,CAACM,UAA7C,CAAL,CAA8DC,IAA9D,EADO,EAEVC,GAFU,CAENC,KAAK,IAAIT,aAAa,CAACM,UAAd,GAA2BG,KAF9B,CAAZ;AAGA,MAAIC,aAAa,GAAGQ,YAAY,CAACP,KAAb,CAClBX,aAAa,CAACY,YADI,EAElBZ,aAAa,CAACa,WAAd,GAA4B,CAFV,CAApB;AAIA,MAAIC,IAAI,GAAG;AACTJ,IAAAA,aADS;AAETV,IAAAA,aAFS;AAGTG,IAAAA,KAHS;AAITe,IAAAA;AAJS,GAAX;AAMA,SAAOJ,IAAP;AACD,CApBM","sourcesContent":["import Paginator from \"paginator\";\r\n\r\nexport const pagination = (currentPage, pageSize, dataSet) => {\r\n  console.log('datos que llegaron',dataSet);\r\n  let paginator = new Paginator(pageSize, 5);\r\n  let paginatorData = paginator.build(dataSet.length, currentPage);\r\n  let pages = [\r\n    ...Array(paginatorData.last_page + 1 - paginatorData.first_page).keys()\r\n  ].map(index => paginatorData.first_page + index);\r\n  let paginatedData = dataSet.slice(\r\n    paginatorData.first_result,\r\n    paginatorData.last_result + 1\r\n  );\r\n  let data = {\r\n    paginatedData,\r\n    paginatorData,\r\n    pages\r\n  };\r\n  return data;\r\n};\r\n\r\nexport const filteredItem = (text, filteredBy, pageSize, dataSet) => {\r\n  let filteredData = dataSet.filter(\r\n    data => data[filteredBy].toLowerCase().includes(text)\r\n  );\r\n  let paginator = new Paginator(pageSize, 7);\r\n  let paginatorData = paginator.build(filteredData.length, 1);\r\n  let pages = [\r\n    ...Array(paginatorData.last_page + 1 - paginatorData.first_page).keys()\r\n  ].map(index => paginatorData.first_page + index);\r\n  let paginatedData = filteredData.slice(\r\n    paginatorData.first_result,\r\n    paginatorData.last_result + 1\r\n  );\r\n  let data = {\r\n    paginatedData,\r\n    paginatorData,\r\n    pages,\r\n    filteredData\r\n  };\r\n  return data;\r\n};"]},"metadata":{},"sourceType":"module"}