{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\jeiso\\\\Desktop\\\\REACT\\\\proyectosESCOM\\\\frontend\\\\ESCOM-view\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\jeiso\\\\Desktop\\\\REACT\\\\proyectosESCOM\\\\frontend\\\\ESCOM-view\\\\src\\\\SuperAdministrador\\\\componentes\\\\color.js\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepButton from '@material-ui/core/StepButton';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { SketchPicker } from 'react-color';\nexport default class Configuracion extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      completed,\n      setCompleted\n    };\n\n    this.handleNext = () => {\n      const newActiveStep = isLastStep() && !allStepsCompleted() ? // It's the last step, but not all steps have been completed,\n      // find the first step that has been completed\n      this.getSteps().findIndex((step, i) => !(i in completed)) : activeStep + 1;\n      setActiveStep(newActiveStep);\n    };\n\n    this.isLastStep = () => {\n      return activeStep === this.getSteps.length - 1;\n    };\n\n    this.completedSteps = () => {\n      return Object.keys(this.state.completed).length;\n    };\n  }\n\n  getSteps() {\n    return ['Select campaign settings', 'Create an ad group', 'Create an ad', 'Create an ad group', 'Create an ad group'];\n  }\n\n  getStepContent(step) {\n    switch (step) {\n      case 0:\n        return React.createElement(SketchPicker, {\n          disableAlpha: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        });\n\n      case 1:\n        return 'Step 2: What is an ad group anyways?';\n\n      case 2:\n        return 'Step 3: This is the bit I really care about!';\n\n      default:\n        return 'Unknown step';\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: classes.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Stepper, {\n      nonLinear: true,\n      activeStep: activeStep,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, this.getSteps.map((label, index) => React.createElement(Step, {\n      key: label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(StepButton, {\n      onClick: handleStep(index),\n      completed: completed[index],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, label)))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, allStepsCompleted() ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      className: classes.instructions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"All steps completed - you're finished\"), React.createElement(Button, {\n      onClick: handleReset,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Reset\")) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      className: classes.instructions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, this.getStepContent(activeStep)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Button, {\n      disabled: activeStep === 0,\n      onClick: handleBack,\n      className: classes.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Back\"), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.handleNext,\n      className: classes.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Next\"), activeStep !== this.getSteps.length && (completed[activeStep] ? React.createElement(Typography, {\n      variant: \"caption\",\n      className: classes.completed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Step \", activeStep + 1, \" already completed\") : React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: handleComplete,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, completedSteps() === this.getSteps.length - 1 ? 'Finish' : 'Complete Step'))))));\n  }\n\n}\nconst classes = useStyles();\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%'\n  },\n  button: {\n    marginRight: theme.spacing(1)\n  },\n  completed: {\n    display: 'inline-block'\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  }\n}));\n\nconst _React$useState = React.useState({}),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      completed = _React$useState2[0],\n      setCompleted = _React$useState2[1];\n\nconst allStepsCompleted = () => {\n  return completedSteps() === totalSteps();\n};\n\nconst handleBack = () => {\n  setActiveStep(prevActiveStep => prevActiveStep - 1);\n};\n\nconst handleStep = step => () => {\n  setActiveStep(step);\n};\n\nconst handleComplete = () => {\n  const newCompleted = completed;\n  newCompleted[activeStep] = true;\n  setCompleted(newCompleted);\n  handleNext();\n};\n\nconst handleReset = () => {\n  setActiveStep(0);\n  setCompleted({});\n};","map":{"version":3,"sources":["C:/Users/jeiso/Desktop/REACT/proyectosESCOM/frontend/ESCOM-view/src/SuperAdministrador/componentes/color.js"],"names":["React","makeStyles","Stepper","Step","StepButton","Button","Typography","SketchPicker","Configuracion","Component","state","completed","setCompleted","handleNext","newActiveStep","isLastStep","allStepsCompleted","getSteps","findIndex","step","i","activeStep","setActiveStep","length","completedSteps","Object","keys","getStepContent","render","classes","root","map","label","index","handleStep","instructions","handleReset","handleBack","button","handleComplete","useStyles","theme","width","marginRight","spacing","display","marginTop","marginBottom","useState","totalSteps","prevActiveStep","newCompleted"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepButton from '@material-ui/core/StepButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { SketchPicker } from 'react-color';\r\n\r\n\r\nexport default class Configuracion extends React.Component {\r\n\t\r\n\tstate={\r\n\t\tcompleted,\r\n\t\tsetCompleted\r\n\t}\r\n\t\r\n\tgetSteps() {\r\n\t\treturn ['Select campaign settings', 'Create an ad group', 'Create an ad', 'Create an ad group', 'Create an ad group'];\r\n\t}\r\n\t\r\n\thandleNext = () => {\r\n\t\tconst newActiveStep =\r\n\t\t\tisLastStep() && !allStepsCompleted()\r\n\t\t\t\t? // It's the last step, but not all steps have been completed,\r\n\t\t\t\t// find the first step that has been completed\r\n\t\t\t\tthis.getSteps().findIndex((step, i) => !(i in completed))\r\n\t\t\t\t: activeStep + 1;\r\n\t\tsetActiveStep(newActiveStep);\r\n\t};\r\n\r\n\tisLastStep = () => {\r\n\t\treturn activeStep === this.getSteps.length - 1;\r\n\t};\r\n\r\n\tcompletedSteps = () => {\r\n\t\treturn Object.keys(this.state.completed).length;\r\n\t};\r\n\t\r\n\r\n\tgetStepContent(step) {\r\n\t\tswitch (step) {\r\n\t\t\tcase 0:\r\n\t\t\t\treturn (<SketchPicker disableAlpha={true} />)\r\n\t\t\tcase 1:\r\n\t\t\t\treturn 'Step 2: What is an ad group anyways?';\r\n\t\t\tcase 2:\r\n\t\t\t\treturn 'Step 3: This is the bit I really care about!';\r\n\t\t\tdefault:\r\n\t\t\t\treturn 'Unknown step';\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className={classes.root}>\r\n\t\t\t\t<Stepper nonLinear activeStep={activeStep}>\r\n\t\t\t\t\t{this.getSteps.map((label, index) => (\r\n\t\t\t\t\t\t<Step key={label}>\r\n\t\t\t\t\t\t\t<StepButton onClick={handleStep(index)} completed={completed[index]}>\r\n\t\t\t\t\t\t\t\t{label}\r\n\t\t\t\t\t\t\t</StepButton>\r\n\t\t\t\t\t\t</Step>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</Stepper>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{allStepsCompleted() ? (\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<Typography className={classes.instructions}>\r\n\t\t\t\t\t\t\t\tAll steps completed - you&apos;re finished\r\n\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t<Button onClick={handleReset}>Reset</Button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<Typography className={classes.instructions}>{this.getStepContent(activeStep)}</Typography>\r\n\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t<Button disabled={activeStep === 0} onClick={handleBack} className={classes.button}>\r\n\t\t\t\t\t\t\t\t\t\tBack\r\n\t\t\t\t  </Button>\r\n\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\t\t\tonClick={this.handleNext}\r\n\t\t\t\t\t\t\t\t\t\tclassName={classes.button}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\tNext\r\n\t\t\t\t  </Button>\r\n\t\t\t\t\t\t\t\t\t{activeStep !== this.getSteps.length &&\r\n\t\t\t\t\t\t\t\t\t\t(completed[activeStep] ? (\r\n\t\t\t\t\t\t\t\t\t\t\t<Typography variant=\"caption\" className={classes.completed}>\r\n\t\t\t\t\t\t\t\t\t\t\t\tStep {activeStep + 1} already completed\r\n\t\t\t\t\t  </Typography>\r\n\t\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={handleComplete}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{completedSteps() === this.getSteps.length - 1 ? 'Finish' : 'Complete Step'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\nconst classes = useStyles();\r\n\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\troot: {\r\n\t\twidth: '100%',\r\n\t},\r\n\tbutton: {\r\n\t\tmarginRight: theme.spacing(1),\r\n\t},\r\n\tcompleted: {\r\n\t\tdisplay: 'inline-block',\r\n\t},\r\n\tinstructions: {\r\n\t\tmarginTop: theme.spacing(1),\r\n\t\tmarginBottom: theme.spacing(1),\r\n\t},\r\n}));\r\n\r\nconst [completed, setCompleted] = React.useState({});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst allStepsCompleted = () => {\r\n\treturn completedSteps() === totalSteps();\r\n};\r\n\r\n\r\n\r\nconst handleBack = () => {\r\n\tsetActiveStep(prevActiveStep => prevActiveStep - 1);\r\n};\r\n\r\nconst handleStep = step => () => {\r\n\tsetActiveStep(step);\r\n};\r\n\r\nconst handleComplete = () => {\r\n\tconst newCompleted = completed;\r\n\tnewCompleted[activeStep] = true;\r\n\tsetCompleted(newCompleted);\r\n\thandleNext();\r\n};\r\n\r\nconst handleReset = () => {\r\n\tsetActiveStep(0);\r\n\tsetCompleted({});\r\n};"]},"metadata":{},"sourceType":"module"}