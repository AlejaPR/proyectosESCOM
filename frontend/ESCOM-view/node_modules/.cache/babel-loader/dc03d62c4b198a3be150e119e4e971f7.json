{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jeiso\\\\Desktop\\\\REACT\\\\proyectosESCOM\\\\frontend\\\\ESCOM-view\\\\src\\\\SuperAdministrador\\\\componentes\\\\administrar\\\\ContenidoConfiguracion.js\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepButton from '@material-ui/core/StepButton';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { SketchPicker } from 'react-color';\nimport { Field, reduxForm } from \"redux-form\";\nimport PropTypes from \"prop-types\";\nimport Defecto from '../../imagenes/defecto.jpg';\nimport Barra from '../general/BarraDirecciones.js';\nimport { connect } from 'react-redux';\nimport { consultarConfiguracion, actionActualizarBarraLateral, actionActualizarBarraSuperior, actionActualizarBotones } from '../../actions/actionConfiguracion.js';\n\nclass Configuracion extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      activeStep: 0,\n      completed: {}\n    };\n\n    this.completedSteps = () => {\n      return Object.keys(this.state.completed).length;\n    };\n\n    this.handleChangeComplete = color => {\n      this.props.actionActualizarBarraLateral(color.hex);\n    };\n\n    this.handleChangeCompleteSuperior = color => {\n      this.props.actionActualizarBarraSuperior(color.hex);\n    };\n\n    this.handleChangeCompleteBotones = color => {\n      this.props.actionActualizarBotones(color.hex);\n    };\n\n    this.allStepsCompleted = () => {\n      return this.completedSteps() === this.totalSteps();\n    };\n\n    this.totalSteps = () => {\n      return this.getSteps().length;\n    };\n\n    this.isLastStep = () => {\n      return this.state.activeStep === this.totalSteps() - 1;\n    };\n\n    this.useStyles = makeStyles(theme => ({\n      root: {\n        width: '100%'\n      },\n      button: {\n        marginRight: theme.spacing(1)\n      },\n      completed: {\n        display: 'inline-block'\n      },\n      instructions: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1)\n      }\n    }));\n\n    this.handleReset = () => {\n      this.setState({\n        activeStep: 0,\n        completed: {}\n      });\n    };\n\n    this.handleComplete = () => {\n      const newCompleted = this.state.completed;\n      newCompleted[this.state.activeStep] = true;\n      this.setState({\n        completed: newCompleted\n      });\n      this.handleNext();\n    };\n\n    this.handleNext = () => {\n      const newActiveStep = this.isLastStep() && !this.allStepsCompleted() ? // It's the last step, but not all steps have been completed,\n      // find the first step that has been completed\n      this.getSteps().findIndex((step, i) => !(i in this.state.completed)) : this.state.activeStep + 1;\n      this.setState({\n        activeStep: newActiveStep\n      });\n    };\n\n    this.handleStep = step => () => {\n      this.setState({\n        activeStep: step\n      });\n    };\n\n    this.handleBack = () => {\n      let cuenta = this.state.activeStep - 1;\n      this.setState({\n        activeStep: cuenta\n      });\n    };\n\n    this.validateImageWeight = imageFile => {\n      if (imageFile && imageFile.size) {\n        const imageFileKb = imageFile.size / 1024;\n        const pesoMaximo = this.props.pesoMaximo;\n\n        if (imageFileKb > pesoMaximo) {\n          return `El tamaÃ±o de la imagen debe ser menor o igual a ${pesoMaximo}kb`;\n        }\n      }\n    };\n\n    this.validateImageWidth = imageFile => {\n      if (imageFile) {\n        const anchuraMaxima = this.props.anchuraMaxima;\n\n        if (imageFile.width > anchuraMaxima) {\n          return `El ancho de la imagen debe ser menor o igual a ${anchuraMaxima}px`;\n        }\n      }\n    };\n\n    this.validateImageHeight = imageFile => {\n      if (imageFile) {\n        const alturaMaxima = this.props.alturaMaxima;\n\n        if (imageFile.height > alturaMaxima) {\n          return `La altura de la imagen debe ser menor o igual a ${alturaMaxima}px`;\n        }\n      }\n    };\n\n    this.validateImageFormat = imageFile => {\n      if (imageFile) {\n        const tipoDeImagen = this.props.tipoDeImagen;\n\n        if (!tipoDeImagen.includes(imageFile.type)) {\n          return `El tipo de imagen debe ser ${tipoDeImagen}`;\n        }\n      }\n    };\n\n    this.handlePreview = imageUrl => {\n      const previewImageDom = document.querySelector(\".preview-image\");\n      previewImageDom.src = imageUrl;\n    };\n\n    this.handleChange = (event, input) => {\n      event.preventDefault();\n      let imageFile = event.target.files[0];\n      const tipoDeImagen = this.props.tipoDeImagen;\n\n      if (imageFile) {\n        if (!tipoDeImagen.includes(imageFile.type)) {\n          // NotificationManager.error('Seleccione un archivo de imagen .jpg o .png');\n          event.target.value = null;\n        } else {\n          const localImageUrl = URL.createObjectURL(imageFile);\n          const imageObject = new window.Image();\n\n          imageObject.onload = () => {\n            imageFile.width = imageObject.naturalWidth;\n            imageFile.height = imageObject.naturalHeight;\n            input.onChange(imageFile);\n            URL.revokeObjectURL(imageFile);\n          };\n\n          imageObject.src = localImageUrl;\n          this.handlePreview(localImageUrl);\n        }\n      }\n    };\n\n    this.renderFileInput = ({\n      input,\n      type,\n      meta\n    }) => {\n      const tipoDeImagen = this.props.tipoDeImagen;\n      const touched = meta.touched,\n            error = meta.error,\n            warning = meta.warning;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        name: input.name,\n        type: type,\n        accept: tipoDeImagen,\n        onChange: event => this.handleChange(event, input),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }), touched && (error && React.createElement(\"span\", {\n        className: \"text-danger letra form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, error) || warning && React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, warning)));\n    };\n\n    this.handleSubmitForm = values => {\n      console.log('formvalues', values);\n    };\n  }\n\n  getSteps() {\n    return ['Color barra superior', 'Color barra lateral', 'Color de botones', 'Imagen del login', 'Imagen del logo'];\n  }\n\n  //\n  getStepContent(step) {\n    switch (step) {\n      case 0:\n        return React.createElement(SketchPicker, {\n          disableAlpha: true,\n          color: this.props.configuracion.fondoBarra,\n          onChangeComplete: this.handleChangeComplete,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        });\n\n      case 1:\n        return React.createElement(SketchPicker, {\n          disableAlpha: true,\n          color: this.props.configuracion.fondoSuperior,\n          onChangeComplete: this.handleChangeCompleteSuperior,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        });\n\n      case 2:\n        return React.createElement(SketchPicker, {\n          disableAlpha: true,\n          color: this.props.configuracion.botones,\n          onChangeComplete: this.handleChangeCompleteBotones,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        });\n\n      case 3:\n        return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n          style: {\n            padding: \"30px 30px 30px 77px\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: Defecto,\n          alt: \"preview\",\n          className: \"preview-image\",\n          style: {\n            height: \"200px\",\n            width: \"200px\",\n            borderRadius: \"50%\",\n            objectFit: \"cover\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        })), React.createElement(Field, {\n          name: \"image\",\n          type: \"file\",\n          validate: [this.validateImageWeight, this.validateImageWidth, this.validateImageHeight, this.validateImageFormat],\n          component: this.renderFileInput,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }));\n\n      case 4:\n        return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n          style: {\n            padding: \"30px 30px 30px 77px\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: Defecto,\n          alt: \"preview\",\n          className: \"preview-image\",\n          style: {\n            height: \"200px\",\n            width: \"200px\",\n            borderRadius: \"50%\",\n            objectFit: \"cover\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        })), React.createElement(Field, {\n          name: \"image\",\n          type: \"file\",\n          validate: [this.validateImageWeight, this.validateImageWidth, this.validateImageHeight, this.validateImageFormat],\n          component: this.renderFileInput,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }));\n\n      default:\n        return 'Unknown step';\n    }\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"text-left titulo\",\n      style: estiloLetrero,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, \"Administrar modulos\")), React.createElement(Barra, {\n      texto: \"Inicio > Configuracion de aspecto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"container shadow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"text-left titulo\",\n      style: estiloLetrero,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, \"Configuracion de aspecto\")), React.createElement(\"div\", {\n      className: this.useStyles.root,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, React.createElement(Stepper, {\n      nonLinear: true,\n      activeStep: this.state.activeStep,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, this.getSteps().map((label, index) => React.createElement(Step, {\n      key: label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, React.createElement(StepButton, {\n      onClick: this.handleStep(index),\n      completed: this.state.completed[index],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, label)))), React.createElement(\"div\", {\n      className: \"container\",\n      style: {\n        paddingTop: \"7px\",\n        paddingRight: \"12px\",\n        paddingLeft: \"40px\",\n        paddingBottom: \"20px\",\n        margin: \"0px 0px 32px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.handleSubmitForm),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, this.allStepsCompleted() ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      className: this.useStyles.instructions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, \"All steps completed - you're finished\"), React.createElement(Button, {\n      onClick: this.handleReset,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }, \"Reset\")) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      className: this.useStyles.instructions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, this.getStepContent(this.state.activeStep)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, React.createElement(Button, {\n      disabled: this.state.activeStep === 0,\n      onClick: this.handleBack,\n      className: this.useStyles.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, \"Back\"), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.handleNext,\n      className: this.useStyles.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, \"Next\"), this.state.activeStep !== this.getSteps().length && (this.state.completed[this.state.activeStep] ? React.createElement(Typography, {\n      variant: \"caption\",\n      className: this.useStyles.completed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, \"Step \", this.state.activeStep + 1, \" already completed\") : React.createElement(Button, {\n      variant: \"contained\",\n      type: \"submit\",\n      color: \"primary\",\n      onClick: this.handleComplete,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, this.completedSteps() === this.totalSteps() - 1 ? 'Finish' : 'Complete Step')))))))));\n  }\n\n}\n\nConfiguracion.propTypes = {\n  previewLogoUrl: PropTypes.string,\n  tipoDeImagen: PropTypes.string,\n  pesoMaximo: PropTypes.number,\n  anchuraMaxima: PropTypes.number,\n  alturaMaxima: PropTypes.number,\n  handleSubmit: PropTypes.func.isRequired\n};\nConfiguracion.defaultProps = {\n  previewLogoUrl: \"https://imgplaceholder.com/400x300\",\n  tipoDeImagen: \"image/jpeg, image/png\",\n  pesoMaximo: 100,\n  anchuraMaxima: 100,\n  alturaMaxima: 100\n};\nconst estiloLetrero = {\n  paddingTop: \"20px\",\n  paddingRight: \"12px\",\n  paddingLeft: \"40px\",\n  paddingBottom: \"1px\"\n};\n\nfunction mapStateToProps(state) {\n  return {\n    configuracion: state.conf.estilos\n  };\n}\n\nlet formularioConfiguracion = reduxForm({\n  form: \"formularioConfiguracion\"\n})(Configuracion);\nexport default connect(mapStateToProps, {\n  consultarConfiguracion,\n  actionActualizarBarraLateral,\n  actionActualizarBarraSuperior,\n  actionActualizarBotones\n})(formularioConfiguracion);","map":{"version":3,"sources":["C:/Users/jeiso/Desktop/REACT/proyectosESCOM/frontend/ESCOM-view/src/SuperAdministrador/componentes/administrar/ContenidoConfiguracion.js"],"names":["React","makeStyles","Stepper","Step","StepButton","Button","Typography","SketchPicker","Field","reduxForm","PropTypes","Defecto","Barra","connect","consultarConfiguracion","actionActualizarBarraLateral","actionActualizarBarraSuperior","actionActualizarBotones","Configuracion","Component","state","activeStep","completed","completedSteps","Object","keys","length","handleChangeComplete","color","props","hex","handleChangeCompleteSuperior","handleChangeCompleteBotones","allStepsCompleted","totalSteps","getSteps","isLastStep","useStyles","theme","root","width","button","marginRight","spacing","display","instructions","marginTop","marginBottom","handleReset","setState","handleComplete","newCompleted","handleNext","newActiveStep","findIndex","step","i","handleStep","handleBack","cuenta","validateImageWeight","imageFile","size","imageFileKb","pesoMaximo","validateImageWidth","anchuraMaxima","validateImageHeight","alturaMaxima","height","validateImageFormat","tipoDeImagen","includes","type","handlePreview","imageUrl","previewImageDom","document","querySelector","src","handleChange","event","input","preventDefault","target","files","value","localImageUrl","URL","createObjectURL","imageObject","window","Image","onload","naturalWidth","naturalHeight","onChange","revokeObjectURL","renderFileInput","meta","touched","error","warning","name","handleSubmitForm","values","console","log","getStepContent","configuracion","fondoBarra","fondoSuperior","botones","padding","borderRadius","objectFit","render","estiloLetrero","map","label","index","paddingTop","paddingRight","paddingLeft","paddingBottom","margin","handleSubmit","propTypes","previewLogoUrl","string","number","func","isRequired","defaultProps","mapStateToProps","conf","estilos","formularioConfiguracion","form"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepButton from '@material-ui/core/StepButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { SketchPicker } from 'react-color';\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport PropTypes from \"prop-types\";\r\nimport Defecto from '../../imagenes/defecto.jpg';\r\nimport Barra from '../general/BarraDirecciones.js';\r\nimport { connect } from 'react-redux';\r\nimport { consultarConfiguracion, actionActualizarBarraLateral, actionActualizarBarraSuperior, actionActualizarBotones } from '../../actions/actionConfiguracion.js'\r\n\r\nclass Configuracion extends React.Component {\r\n\r\n    state = {\r\n        activeStep: 0,\r\n        completed: {}\r\n    }\r\n\r\n    getSteps() {\r\n        return ['Color barra superior', 'Color barra lateral', 'Color de botones', 'Imagen del login', 'Imagen del logo'];\r\n    }\r\n\r\n    completedSteps = () => {\r\n        return Object.keys(this.state.completed).length;\r\n    };\r\n\r\n    handleChangeComplete = (color) => {\r\n        this.props.actionActualizarBarraLateral(color.hex);\r\n    };\r\n\r\n    handleChangeCompleteSuperior = (color) => {\r\n        this.props.actionActualizarBarraSuperior(color.hex);\r\n    };\r\n\r\n    handleChangeCompleteBotones = (color) => {\r\n        this.props.actionActualizarBotones(color.hex);\r\n    };\r\n    //\r\n    getStepContent(step) {\r\n        switch (step) {\r\n            case 0:\r\n                return (<SketchPicker disableAlpha={true} color={this.props.configuracion.fondoBarra} onChangeComplete={this.handleChangeComplete} />)\r\n            case 1:\r\n                return (<SketchPicker disableAlpha={true} color={this.props.configuracion.fondoSuperior} onChangeComplete={this.handleChangeCompleteSuperior} />)\r\n            case 2:\r\n                return (<SketchPicker disableAlpha={true} color={this.props.configuracion.botones} onChangeComplete={this.handleChangeCompleteBotones} />);\r\n            case 3:\r\n                return (<>\r\n                    <div style={{ padding: \"30px 30px 30px 77px\" }}>\r\n                        <img src={Defecto} alt=\"preview\"\r\n                            className=\"preview-image\"\r\n                            style={{ height: \"200px\", width: \"200px\", borderRadius: \"50%\", objectFit: \"cover\" }} />\r\n                    </div>\r\n                    <Field\r\n                        name=\"image\"\r\n                        type=\"file\"\r\n                        validate={[\r\n                            this.validateImageWeight,\r\n                            this.validateImageWidth,\r\n                            this.validateImageHeight,\r\n                            this.validateImageFormat\r\n                        ]}\r\n                        component={this.renderFileInput}\r\n                    />\r\n                </>);\r\n            case 4:\r\n                return (\r\n                    <>\r\n                        <div style={{ padding: \"30px 30px 30px 77px\" }}>\r\n                            <img src={Defecto} alt=\"preview\"\r\n                                className=\"preview-image\"\r\n                                style={{ height: \"200px\", width: \"200px\", borderRadius: \"50%\", objectFit: \"cover\" }} />\r\n                        </div>\r\n                        <Field\r\n                            name=\"image\"\r\n                            type=\"file\"\r\n                            validate={[\r\n                                this.validateImageWeight,\r\n                                this.validateImageWidth,\r\n                                this.validateImageHeight,\r\n                                this.validateImageFormat\r\n                            ]}\r\n                            component={this.renderFileInput}\r\n                        />\r\n                    </>)\r\n\r\n            default:\r\n                return 'Unknown step';\r\n        }\r\n    }\r\n\r\n    allStepsCompleted = () => {\r\n        return this.completedSteps() === this.totalSteps();\r\n    };\r\n\r\n    totalSteps = () => {\r\n        return this.getSteps().length;\r\n    };\r\n\r\n    isLastStep = () => {\r\n        return this.state.activeStep === this.totalSteps() - 1;\r\n    };\r\n\r\n    useStyles = makeStyles(theme => ({\r\n        root: {\r\n            width: '100%',\r\n        },\r\n        button: {\r\n            marginRight: theme.spacing(1),\r\n        },\r\n        completed: {\r\n            display: 'inline-block',\r\n        },\r\n        instructions: {\r\n            marginTop: theme.spacing(1),\r\n            marginBottom: theme.spacing(1),\r\n        },\r\n    }));\r\n\r\n    handleReset = () => {\r\n        this.setState({ activeStep: 0, completed: {} })\r\n    };\r\n\r\n    handleComplete = () => {\r\n        const newCompleted = this.state.completed;\r\n        newCompleted[this.state.activeStep] = true;\r\n        this.setState({ completed: newCompleted })\r\n        this.handleNext();\r\n    };\r\n\r\n    handleNext = () => {\r\n        const newActiveStep =\r\n            this.isLastStep() && !this.allStepsCompleted()\r\n                ? // It's the last step, but not all steps have been completed,\r\n                // find the first step that has been completed\r\n                this.getSteps().findIndex((step, i) => !(i in this.state.completed))\r\n                : this.state.activeStep + 1;\r\n        this.setState({ activeStep: newActiveStep })\r\n    };\r\n\r\n    handleStep = step => () => {\r\n        this.setState({ activeStep: step })\r\n    };\r\n\r\n    handleBack = () => {\r\n        let cuenta = this.state.activeStep - 1;\r\n        this.setState({ activeStep: cuenta })\r\n    };\r\n\r\n    static propTypes = {\r\n        previewLogoUrl: PropTypes.string,\r\n        tipoDeImagen: PropTypes.string,\r\n        pesoMaximo: PropTypes.number,\r\n        anchuraMaxima: PropTypes.number,\r\n        alturaMaxima: PropTypes.number,\r\n        handleSubmit: PropTypes.func.isRequired\r\n    };\r\n\r\n    static defaultProps = {\r\n        previewLogoUrl: \"https://imgplaceholder.com/400x300\",\r\n        tipoDeImagen: \"image/jpeg, image/png\",\r\n        pesoMaximo: 100,\r\n        anchuraMaxima: 100,\r\n        alturaMaxima: 100\r\n    };\r\n    validateImageWeight = imageFile => {\r\n        if (imageFile && imageFile.size) {\r\n            const imageFileKb = imageFile.size / 1024;\r\n            const { pesoMaximo } = this.props;\r\n\r\n            if (imageFileKb > pesoMaximo) {\r\n                return `El tamaÃ±o de la imagen debe ser menor o igual a ${pesoMaximo}kb`;\r\n            }\r\n        }\r\n    };\r\n    validateImageWidth = imageFile => {\r\n        if (imageFile) {\r\n            const { anchuraMaxima } = this.props;\r\n            if (imageFile.width > anchuraMaxima) {\r\n                return `El ancho de la imagen debe ser menor o igual a ${anchuraMaxima}px`;\r\n            }\r\n        }\r\n    };\r\n    validateImageHeight = imageFile => {\r\n        if (imageFile) {\r\n            const { alturaMaxima } = this.props;\r\n\r\n            if (imageFile.height > alturaMaxima) {\r\n                return `La altura de la imagen debe ser menor o igual a ${alturaMaxima}px`;\r\n            }\r\n        }\r\n    };\r\n\r\n    validateImageFormat = imageFile => {\r\n        if (imageFile) {\r\n            const { tipoDeImagen } = this.props;\r\n            if (!tipoDeImagen.includes(imageFile.type)) {\r\n                return `El tipo de imagen debe ser ${tipoDeImagen}`;\r\n            }\r\n        }\r\n    };\r\n\r\n    handlePreview = imageUrl => {\r\n        const previewImageDom = document.querySelector(\".preview-image\");\r\n        previewImageDom.src = imageUrl;\r\n    };\r\n\r\n    handleChange = (event, input) => {\r\n        event.preventDefault();\r\n        let imageFile = event.target.files[0];\r\n        const { tipoDeImagen } = this.props;\r\n        if (imageFile) {\r\n            if (!tipoDeImagen.includes(imageFile.type)) {\r\n                // NotificationManager.error('Seleccione un archivo de imagen .jpg o .png');\r\n                event.target.value = null;\r\n            } else {\r\n\r\n                const localImageUrl = URL.createObjectURL(imageFile);\r\n                const imageObject = new window.Image();\r\n\r\n                imageObject.onload = () => {\r\n                    imageFile.width = imageObject.naturalWidth;\r\n                    imageFile.height = imageObject.naturalHeight;\r\n                    input.onChange(imageFile);\r\n                    URL.revokeObjectURL(imageFile);\r\n                };\r\n                imageObject.src = localImageUrl;\r\n                this.handlePreview(localImageUrl);\r\n            }\r\n        }\r\n    };\r\n\r\n    renderFileInput = ({ input, type, meta }) => {\r\n        const { tipoDeImagen } = this.props;\r\n        const { touched, error, warning } = meta;\r\n        return (\r\n            <div>\r\n                <input\r\n                    name={input.name}\r\n                    type={type}\r\n                    accept={tipoDeImagen}\r\n                    onChange={event => this.handleChange(event, input)}\r\n                />\r\n                {touched && ((error && <span className=\"text-danger letra form-group\">{error}</span>) || (warning && <span>{warning}</span>))}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    handleSubmitForm = values => {\r\n        console.log('formvalues', values);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <div className=\"text-left titulo\" style={estiloLetrero}>\r\n\t\t\t\t\t<h4>Administrar modulos</h4>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Barra texto=\"Inicio > Configuracion de aspecto\" />\r\n            <div className=\"container shadow\" >\r\n                <div className=\"text-left titulo\" style={estiloLetrero}>\r\n                    <h4>Configuracion de aspecto</h4>\r\n                </div>\r\n                <div className={this.useStyles.root}>\r\n                    <Stepper nonLinear activeStep={this.state.activeStep}>\r\n                        {this.getSteps().map((label, index) => (\r\n                            <Step key={label}>\r\n                                <StepButton onClick={this.handleStep(index)} completed={this.state.completed[index]}>\r\n                                    {label}\r\n                                </StepButton>\r\n                            </Step>\r\n                        ))}\r\n                    </Stepper>\r\n                    <div className=\"container\" style={{\r\n                        paddingTop: \"7px\",\r\n                        paddingRight: \"12px\",\r\n                        paddingLeft: \"40px\",\r\n                        paddingBottom: \"20px\",\r\n                        margin: \"0px 0px 32px\"\r\n                    }}>\r\n                        <form onSubmit={this.props.handleSubmit(this.handleSubmitForm)}>\r\n                            {this.allStepsCompleted() ? (\r\n                                <div>\r\n                                    <Typography className={this.useStyles.instructions}>\r\n                                        All steps completed - you&apos;re finished\r\n            </Typography>\r\n                                    <Button onClick={this.handleReset}>Reset</Button>\r\n                                </div>\r\n                            ) : (\r\n                                    <div>\r\n                                        <Typography className={this.useStyles.instructions}>{this.getStepContent(this.state.activeStep)}</Typography>\r\n                                        <div>\r\n                                            <Button disabled={this.state.activeStep === 0} onClick={this.handleBack} className={this.useStyles.button}>\r\n                                                Back\r\n              </Button>\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                onClick={this.handleNext}\r\n                                                className={this.useStyles.button}\r\n                                            >\r\n                                                Next\r\n              </Button>\r\n                                            {this.state.activeStep !== this.getSteps().length &&\r\n                                                (this.state.completed[this.state.activeStep] ? (\r\n                                                    <Typography variant=\"caption\" className={this.useStyles.completed}>\r\n                                                        Step {this.state.activeStep + 1} already completed\r\n                  </Typography>\r\n                                                ) : (\r\n                                                        <Button variant=\"contained\" type=\"submit\" color=\"primary\" onClick={this.handleComplete}>\r\n                                                            {this.completedSteps() === this.totalSteps() - 1 ? 'Finish' : 'Complete Step'}\r\n                                                        </Button>\r\n                                                    ))}\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div >\r\n            </>\r\n        );\r\n    }\r\n}\r\nconst estiloLetrero = {\r\n    paddingTop: \"20px\",\r\n    paddingRight: \"12px\",\r\n    paddingLeft: \"40px\",\r\n    paddingBottom: \"1px\"\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        configuracion: state.conf.estilos\r\n    }\r\n}\r\n\r\nlet formularioConfiguracion = reduxForm({\r\n    form: \"formularioConfiguracion\"\r\n})(Configuracion);\r\n\r\n\r\nexport default connect(mapStateToProps, { consultarConfiguracion, actionActualizarBarraLateral, actionActualizarBarraSuperior, actionActualizarBotones })(formularioConfiguracion);\r\n\r\n"]},"metadata":{},"sourceType":"module"}