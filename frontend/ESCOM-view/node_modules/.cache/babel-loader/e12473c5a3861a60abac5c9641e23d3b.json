{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jeiso\\\\Desktop\\\\REACT\\\\proyectosESCOM\\\\frontend\\\\ESCOM-view\\\\src\\\\SuperAdministrador\\\\componentes\\\\popup\\\\PopUpModulo.js\";\nimport React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min'; //estilos\n\nimport '../../css/business-casual.css';\nimport '../../css/estilos.css';\nimport '../../css/bootstrap.min.css';\nimport '../../css/menu.css';\nimport 'react-notifications/lib/notifications.css';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport { NotificationContainer } from 'react-notifications';\nimport { Field, reduxForm } from \"redux-form\";\n\nclass PopUpModulo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.validateImageWeight = imageFile => {\n      if (imageFile && imageFile.size) {\n        // Get image size in kilobytes\n        const imageFileKb = imageFile.size / 1024;\n        const maxWeight = this.props.maxWeight;\n\n        if (imageFileKb > maxWeight) {\n          return `Image size must be less or equal to ${maxWeight}kb`;\n        }\n      }\n    };\n\n    this.validateImageWidth = imageFile => {\n      if (imageFile) {\n        const maxWidth = this.props.maxWidth;\n\n        if (imageFile.width > maxWidth) {\n          return `Image width must be less or equal to ${maxWidth}px`;\n        }\n      }\n    };\n\n    this.validateImageHeight = imageFile => {\n      if (imageFile) {\n        const maxHeight = this.props.maxHeight;\n\n        if (imageFile.height > maxHeight) {\n          return `Image height must be less or equal to ${maxHeight}px`;\n        }\n      }\n    };\n\n    this.validateImageFormat = imageFile => {\n      if (imageFile) {\n        const mimeType = this.props.mimeType;\n\n        if (!mimeType.includes(imageFile.type)) {\n          return `Image mime type must be ${mimeType}`;\n        }\n      }\n    };\n\n    this.handlePreview = imageUrl => {\n      const previewImageDom = document.querySelector(\".preview-image\");\n      previewImageDom.src = imageUrl;\n    };\n\n    this.handleChange = (event, input) => {\n      event.preventDefault();\n      let imageFile = event.target.files[0];\n\n      if (imageFile) {\n        const localImageUrl = URL.createObjectURL(imageFile);\n        const imageObject = new window.Image();\n\n        imageObject.onload = () => {\n          imageFile.width = imageObject.naturalWidth;\n          imageFile.height = imageObject.naturalHeight;\n          input.onChange(imageFile);\n          URL.revokeObjectURL(imageFile);\n        };\n\n        imageObject.src = localImageUrl;\n        this.handlePreview(localImageUrl);\n      }\n    };\n\n    this.renderFileInput = ({\n      input,\n      type,\n      meta\n    }) => {\n      const mimeType = this.props.mimeType;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        name: input.name,\n        type: type,\n        accept: mimeType,\n        onChange: event => this.handleChange(event, input),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), meta && meta.invalid && meta.error && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, meta.error));\n    };\n\n    this.handleSubmitForm = values => {\n      console.log(\"Form Values: \", values);\n    };\n\n    this.state = {\n      modal: false\n    };\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  render() {\n    const _this$props = this.props,\n          previewLogoUrl = _this$props.previewLogoUrl,\n          maxWidth = _this$props.maxWidth,\n          maxHeight = _this$props.maxHeight,\n          maxWeight = _this$props.maxWeight,\n          handleSubmit = _this$props.handleSubmit;\n    return React.createElement(React.Fragment, null, React.createElement(\"img\", {\n      src: previewLogoUrl,\n      alt: \"preview\",\n      className: \"preview-image\",\n      style: {\n        height: \"300px\",\n        objectFit: \"cover\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"be JPEG or PNG\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"have Width \\u2264 \", maxWidth, \"px\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"have Height \\u2264 \", maxHeight, \"px\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"have Size \\u2264 \", maxWeight, \"kb\")), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"image\",\n      type: \"file\",\n      validate: [this.validateImageWeight, this.validateImageWidth, this.validateImageHeight, this.validateImageFormat],\n      component: this.renderFileInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), React.createElement(Button, {\n      primary: true,\n      type: \"submit\",\n      className: \"form-submit-button\",\n      onClick: handleSubmit(this.handleSubmitForm),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"Submit\")));\n  }\n\n}\n\nPopUpModulo.propTypes = {\n  previewLogoUrl: PropTypes.string,\n  mimeType: PropTypes.string,\n  maxWeight: PropTypes.number,\n  maxWidth: PropTypes.number,\n  maxHeight: PropTypes.number,\n  // redux-form porps\n  handleSubmit: PropTypes.func.isRequired\n};\nPopUpModulo.defaultProps = {\n  previewLogoUrl: \"https://imgplaceholder.com/400x300\",\n  mimeType: \"image/jpeg, image/png\",\n  maxWeight: 100,\n  maxWidth: 100,\n  maxHeight: 100\n};\nconst fondoBoton = {\n  background: \"#ec671d\",\n  fontSize: \"13px\",\n  fontFamily: \"sans-serif\"\n};\nexport default reduxForm({\n  form: \"formularioModulo\"\n})(PopUpModulo);","map":{"version":3,"sources":["C:/Users/jeiso/Desktop/REACT/proyectosESCOM/frontend/ESCOM-view/src/SuperAdministrador/componentes/popup/PopUpModulo.js"],"names":["React","Button","Modal","ModalHeader","ModalBody","ModalFooter","NotificationContainer","Field","reduxForm","PopUpModulo","Component","constructor","props","validateImageWeight","imageFile","size","imageFileKb","maxWeight","validateImageWidth","maxWidth","width","validateImageHeight","maxHeight","height","validateImageFormat","mimeType","includes","type","handlePreview","imageUrl","previewImageDom","document","querySelector","src","handleChange","event","input","preventDefault","target","files","localImageUrl","URL","createObjectURL","imageObject","window","Image","onload","naturalWidth","naturalHeight","onChange","revokeObjectURL","renderFileInput","meta","name","invalid","error","handleSubmitForm","values","console","log","state","modal","toggle","bind","setState","prevState","render","previewLogoUrl","handleSubmit","objectFit","propTypes","PropTypes","string","number","func","isRequired","defaultProps","fondoBoton","background","fontSize","fontFamily","form"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\r\n\r\n\r\n//estilos\r\nimport '../../css/business-casual.css'\r\nimport '../../css/estilos.css'\r\nimport '../../css/bootstrap.min.css'\r\nimport '../../css/menu.css'\r\nimport 'react-notifications/lib/notifications.css';\r\n\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { NotificationContainer } from 'react-notifications';\r\nimport { Field, reduxForm } from \"redux-form\";\r\n\r\nclass PopUpModulo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      modal: false\r\n    };\r\n    this.toggle = this.toggle.bind(this);\r\n  }\r\n\r\n  toggle() {\r\n    this.setState(prevState => ({\r\n      modal: !prevState.modal\r\n    }));\r\n  }\r\n\r\n  static propTypes = {\r\n    previewLogoUrl: PropTypes.string,\r\n    mimeType: PropTypes.string,\r\n    maxWeight: PropTypes.number,\r\n    maxWidth: PropTypes.number,\r\n    maxHeight: PropTypes.number,\r\n    // redux-form porps\r\n    handleSubmit: PropTypes.func.isRequired\r\n  };\r\n  static defaultProps = {\r\n    previewLogoUrl: \"https://imgplaceholder.com/400x300\",\r\n    mimeType: \"image/jpeg, image/png\",\r\n    maxWeight: 100,\r\n    maxWidth: 100,\r\n    maxHeight: 100\r\n  };\r\n  validateImageWeight = imageFile => {\r\n    if (imageFile && imageFile.size) {\r\n      // Get image size in kilobytes\r\n      const imageFileKb = imageFile.size / 1024;\r\n      const { maxWeight } = this.props;\r\n\r\n      if (imageFileKb > maxWeight) {\r\n        return `Image size must be less or equal to ${maxWeight}kb`;\r\n      }\r\n    }\r\n  };\r\n  validateImageWidth = imageFile => {\r\n    if (imageFile) {\r\n      const { maxWidth } = this.props;\r\n\r\n      if (imageFile.width > maxWidth) {\r\n        return `Image width must be less or equal to ${maxWidth}px`;\r\n      }\r\n    }\r\n  };\r\n  validateImageHeight = imageFile => {\r\n    if (imageFile) {\r\n      const { maxHeight } = this.props;\r\n\r\n      if (imageFile.height > maxHeight) {\r\n        return `Image height must be less or equal to ${maxHeight}px`;\r\n      }\r\n    }\r\n  };\r\n  validateImageFormat = imageFile => {\r\n    if (imageFile) {\r\n      const { mimeType } = this.props;\r\n\r\n      if (!mimeType.includes(imageFile.type)) {\r\n        return `Image mime type must be ${mimeType}`;\r\n      }\r\n    }\r\n  };\r\n  handlePreview = imageUrl => {\r\n    const previewImageDom = document.querySelector(\".preview-image\");\r\n    previewImageDom.src = imageUrl;\r\n  };\r\n  handleChange = (event, input) => {\r\n    event.preventDefault();\r\n    let imageFile = event.target.files[0];\r\n    if (imageFile) {\r\n      const localImageUrl = URL.createObjectURL(imageFile);\r\n      const imageObject = new window.Image();\r\n\r\n      imageObject.onload = () => {\r\n        imageFile.width = imageObject.naturalWidth;\r\n        imageFile.height = imageObject.naturalHeight;\r\n        input.onChange(imageFile);\r\n        URL.revokeObjectURL(imageFile);\r\n      };\r\n      imageObject.src = localImageUrl;\r\n      this.handlePreview(localImageUrl);\r\n    }\r\n  };\r\n  renderFileInput = ({ input, type, meta }) => {\r\n    const { mimeType } = this.props;\r\n    return (\r\n      <div>\r\n        <input\r\n          name={input.name}\r\n          type={type}\r\n          accept={mimeType}\r\n          onChange={event => this.handleChange(event, input)}\r\n        />\r\n        {meta && meta.invalid && meta.error && (\r\n          <div >{meta.error}</div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n  handleSubmitForm = values => {\r\n    console.log(\"Form Values: \", values);\r\n  };\r\n  render() {\r\n    const {\r\n      previewLogoUrl,\r\n      maxWidth,\r\n      maxHeight,\r\n      maxWeight,\r\n      handleSubmit\r\n    } = this.props;\r\n    return (\r\n      <>\r\n        <img src={previewLogoUrl} alt=\"preview\"\r\n          className=\"preview-image\"\r\n          style={{ height: \"300px\", objectFit: \"cover\" }} />\r\n        <ul>\r\n          <li>be JPEG or PNG</li>\r\n          <li>have Width ≤ {maxWidth}px</li>\r\n          <li>have Height ≤ {maxHeight}px</li>\r\n          <li>have Size ≤ {maxWeight}kb</li>\r\n        </ul>\r\n        <form>\r\n          <Field\r\n            name=\"image\"\r\n            type=\"file\"\r\n            validate={[\r\n              this.validateImageWeight,\r\n              this.validateImageWidth,\r\n              this.validateImageHeight,\r\n              this.validateImageFormat\r\n            ]}\r\n            component={this.renderFileInput}\r\n          />\r\n          <Button\r\n            primary\r\n            type=\"submit\"\r\n            className=\"form-submit-button\"\r\n            onClick={handleSubmit(this.handleSubmitForm)}\r\n          >\r\n            Submit\r\n                </Button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nconst fondoBoton = {\r\n  background: \"#ec671d\",\r\n  fontSize: \"13px\",\r\n  fontFamily: \"sans-serif\"\r\n\r\n}\r\n\r\n\r\nexport default reduxForm({\r\n  form: \"formularioModulo\"\r\n})(PopUpModulo);\r\n"]},"metadata":{},"sourceType":"module"}